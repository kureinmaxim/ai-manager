import json
import os
import sys
from pathlib import Path
from datetime import date, datetime
import uuid
from flask import Flask, render_template, request, redirect, url_for, make_response, send_from_directory, jsonify, flash, abort, session, send_file
from dotenv import load_dotenv
from cryptography.fernet import Fernet, InvalidToken
from werkzeug.utils import secure_filename
from werkzeug.serving import make_server
import requests
from urllib.parse import urlparse
import copy
import threading
import subprocess
import shutil
import webview
import signal
import logging
import re
from jinja2 import Environment, FileSystemLoader, select_autoescape
from jinja2.ext import do as DoExtension
from yubikey_auth import check_internet_connection
import sys
import socket
import time

# Handle Windows console encoding for non-encodable characters (e.g., emojis)
try:
    if os.name == 'nt':
        for _name in ('stdout', 'stderr'):
            _stream = getattr(sys, _name, None)
            if _stream is not None and hasattr(_stream, 'reconfigure'):
                _stream.reconfigure(errors='replace')
except Exception:
    pass

# –£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–µ
def load_env_file():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç .env —Ñ–∞–π–ª –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç."""
    from pathlib import Path
    import os
    
    # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –∫ .env —Ñ–∞–π–ª—É
    possible_paths = []
    
    # 1. –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    possible_paths.append(Path.cwd() / ".env")
    
    # 2. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞)
    if getattr(sys, 'frozen', False):
        # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø–∞–∫–æ–≤–∞–Ω–æ
        if sys.platform == 'darwin':  # macOS
            # –í .app –±–∞–Ω–¥–ª–µ
            app_bundle = Path(sys.executable).parent.parent.parent
            possible_paths.append(app_bundle / "Contents" / "Resources" / ".env")
            # –í –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            user_env = Path.home() / "Library" / "Application Support" / "AllManagerC" / ".env"
            possible_paths.append(user_env)
            # –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            app_dir = Path(sys.executable).parent
            possible_paths.append(app_dir / ".env")
        elif sys.platform == 'win32':  # Windows
            # –û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å –¥–ª—è .exe ‚Äî –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from pathlib import Path as _P
            possible_paths.append(_P(os.environ.get('APPDATA', str(Path.home()))) / 'AllManagerC' / '.env')
            # –†—è–¥–æ–º —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–æ–º
            possible_paths.append(Path(sys.executable).parent / '.env')
        else:
            # Linux –∏ –¥—Ä.: ~/.local/share/AllManagerC/.env –∏ —Ä—è–¥–æ–º —Å exe
            possible_paths.append(Path.home() / '.local' / 'share' / 'AllManagerC' / '.env')
            possible_paths.append(Path(sys.executable).parent / '.env')
    
    # 3. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–∞
    script_dir = Path(__file__).parent
    possible_paths.append(script_dir / ".env")
    
    # 4. –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    parent_dir = Path(__file__).parent.parent
    possible_paths.append(parent_dir / ".env")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å .env –∏–∑ –∫–∞–∂–¥–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    for env_path in possible_paths:
                print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å: {env_path} {'‚úÖ' if env_path.exists() else '‚ùå'}")
                if env_path.exists():
                    print(f"üìÅ –ù–∞–π–¥–µ–Ω .env —Ñ–∞–π–ª: {env_path}")
                    print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ .env —Ñ–∞–π–ª–∞:")
                    try:
                        with open(env_path, 'r', encoding='utf-8') as f:
                            content = f.read().strip()
                            print(f"   {content}")
                    except Exception as e:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                    
                    load_dotenv(env_path)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                    static_passwords = os.getenv('YUBIKEY_STATIC_PASSWORDS')
                    print(f"üîë YUBIKEY_STATIC_PASSWORDS: {repr(static_passwords)}")
                    
                    return True
    
    print(f"‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –º–µ—Å—Ç–∞—Ö:")
    for path in possible_paths:
        print(f"   - {path} {'‚úÖ' if path.exists() else '‚ùå'}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"üîç –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    for key, value in os.environ.items():
        if 'YUBIKEY' in key or 'SECRET' in key:
            print(f"   {key}: {repr(value)}")
    
    return False

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
load_env_file()

app = Flask(__name__)
# –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è cookie –¥–ª—è —Å–µ—Å—Å–∏–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ –Ω–∞ 127.0.0.1
app.config['SESSION_COOKIE_NAME'] = 'allmanagerc_session'

# –í–∫–ª—é—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ 'do' –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö Jinja2
app.jinja_env.add_extension(DoExtension)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def get_app_data_dir():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –∑–∞–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ –ø–∞–∫–µ—Ç
    is_frozen = getattr(sys, 'frozen', False)
    
    # –ò–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app_name = "AllManagerC"
    
    if is_frozen:  # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∫–∞–∫ .app –∏–ª–∏ .exe
        if sys.platform == 'darwin':  # macOS
            # ~/Library/Application Support/AllManager
            app_data_dir = os.path.join(
                os.path.expanduser("~"), 
                "Library", "Application Support", 
                app_name
            )
        elif sys.platform == 'win32':  # Windows
            # %APPDATA%\AllManager
            app_data_dir = os.path.join(
                os.environ.get('APPDATA', os.path.expanduser("~")),
                app_name
            )
        else:  # Linux –∏ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º—ã
            # ~/.local/share/AllManager
            app_data_dir = os.path.join(
                os.path.expanduser("~"),
                ".local", "share",
                app_name
            )
    else:
        # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
        app_data_dir = os.path.join(os.getcwd())
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥—Ä—É–∑–æ–∫
    os.makedirs(os.path.join(app_data_dir, "data"), exist_ok=True)
    os.makedirs(os.path.join(app_data_dir, "uploads"), exist_ok=True)
    
    return app_data_dir

# --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ö–û–ù–§–ò–ì–ê ---
APP_DATA_DIR = get_app_data_dir()
is_frozen = getattr(sys, 'frozen', False)

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø YubiKey ---
try:
    from yubikey_auth import init_yubikey_auth
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(APP_DATA_DIR, exist_ok=True)
    print(f"üìÅ APP_DATA_DIR: {APP_DATA_DIR}")
    
    yubikey_auth = init_yubikey_auth(APP_DATA_DIR)
    if yubikey_auth:
        print("‚úÖ YubiKey –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print(f"   - Enabled: {yubikey_auth.enabled}")
        print(f"   - Keys count: {len(yubikey_auth.keys)}")
    else:
        print("‚ö†Ô∏è YubiKey –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        yubikey_auth = None
except ImportError as e:
    print(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å yubikey_auth –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
    print("‚ö†Ô∏è YubiKey –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    yubikey_auth = None
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ YubiKey: {e}")
    print("‚ö†Ô∏è YubiKey –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    yubikey_auth = None

# –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_config_path = Path(APP_DATA_DIR) / 'config.json'

def load_config_from_path(path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON –∫–æ–Ω—Ñ–∏–≥ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏."""
    if not path.exists():
        return None
    try:
        with open(path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (json.JSONDecodeError, IOError):
        return None

# –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∏—Ç—å "—ç—Ç–∞–ª–æ–Ω–Ω—ã–π" –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –±–∞–Ω–¥–ª–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
bundle_config = None
if is_frozen:
    try:
        # sys._MEIPASS - —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—É—Ç—å, –∫–æ—Ç–æ—Ä—ã–π PyInstaller —Å–æ–∑–¥–∞–µ—Ç –≤ —Å–æ–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        bundle_config_path = Path(sys._MEIPASS) / 'config.json'
        bundle_config = load_config_from_path(bundle_config_path)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥: {e}")

# –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ñ–∏–≥
user_config = load_config_from_path(user_config_path)

# –®–∞–≥ 3: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π –∫–æ–Ω—Ñ–∏–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
final_config = {}
if user_config is None and bundle_config is not None:
    # –°–ª—É—á–∞–π 1: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∞, –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –±–∞–Ω–¥–ª–∞
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ {bundle_config_path}")
    try:
        shutil.copy(bundle_config_path, user_config_path)
        final_config = bundle_config
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        final_config = {} # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–±–æ—è
elif bundle_config is not None and user_config is not None:
    # –°–ª—É—á–∞–π 2: –û–±–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –µ—Å—Ç—å. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º.
    bundle_version = bundle_config.get('app_info', {}).get('version', '0.0.0')
    user_version = user_config.get('app_info', {}).get('version', '0.0.0')

    # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if bundle_version > user_version:
        print(f"–ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è ({bundle_version} > {user_version}). –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞.")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_config['app_info'] = bundle_config['app_info']
        final_config = user_config
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
        try:
            with open(user_config_path, 'w', encoding='utf-8') as f:
                json.dump(user_config, f, indent=2, ensure_ascii=False)
        except IOError as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
    else:
        # –í–µ—Ä—Å–∏—è –Ω–µ –Ω–æ–≤–µ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –µ—Å—Ç—å
        final_config = user_config
else:
    # –°–ª—É—á–∞–π 3: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –ø—É—Å—Ç–æ–π, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏ –Ω–µ—Ç –±–∞–Ω–¥–ª–∞)
    final_config = user_config if user_config is not None else {}
    if not is_frozen and not user_config_path.exists():
        print(f"–í–ù–ò–ú–ê–ù–ò–ï: {user_config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π.")
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è—Ö
        with open(user_config_path, 'w', encoding='utf-8') as f:
            json.dump({}, f)

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ Flask
app.config.update(final_config)


# –ï—Å–ª–∏ `app_info` –≤—Å–µ –µ—â–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Å–∞–º–æ–º –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –≤ dev), –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
if 'app_info' not in app.config:
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ config.json
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
            version = config.get('app_info', {}).get('version', '5.5.4')
            developer = config.get('app_info', {}).get('developer', 'AI Manager Team')
    except:
        version = '5.5.4'
        developer = 'AI Manager Team'
    app.config['app_info'] = {
        "version": "N/A",
        "last_updated": "N/A",
        "developer": "N/A"
    }

# –î–æ–±–∞–≤–∏–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è Jinja2
def format_datetime_filter(iso_str):
    """Jinja —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ISO-—Å—Ç—Ä–æ–∫–∏ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º."""
    if not iso_str:
        return "N/A"
    try:
        dt = datetime.fromisoformat(iso_str)
        return dt.strftime('%Y-%m-%d %H:%M')
    except (ValueError, TypeError):
        return iso_str

app.jinja_env.filters['format_datetime'] = format_datetime_filter

@app.context_processor
def inject_app_info():
    """–ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤–æ –≤—Å–µ —à–∞–±–ª–æ–Ω—ã."""
    return {'app_info': app.config.get('app_info', {})}

# –ö–ª—é—á –¥–ª—è flash-—Å–æ–æ–±—â–µ–Ω–∏–π
app.config['SECRET_KEY'] = os.getenv("FLASK_SECRET_KEY", "a-default-secret-key-for-flash")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.config['UPLOAD_FOLDER'] = os.path.join(APP_DATA_DIR, 'uploads')
# –†–∞—Å—à–∏—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
app.config['ALLOWED_EXTENSIONS'] = {'txt', 'rtf', 'md', 'pdf', 'png', 'jpg', 'jpeg', 'enc'}

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –∏ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É—é—Ç

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ---
# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ IP (—Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø)
ALLOWED_IPS = ["127.0.0.1", "::1"]  # localhost –∏ IPv6 localhost

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
try:
    from security_logger import setup_security_logger, log_security_event
    security_logger = setup_security_logger()
    print("‚úÖ –õ–æ–≥–≥–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except ImportError:
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å security_logger –Ω–µ –Ω–∞–π–¥–µ–Ω. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
    def log_security_event(event_type, details, ip_address=None):
        print(f"üîí SECURITY: {event_type} - {details} - IP: {ip_address}")
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
os.makedirs(os.path.join(APP_DATA_DIR, 'data'), exist_ok=True)

@app.context_processor
def inject_request():
    return {'request': request}

@app.context_processor
def inject_service_urls():
    # –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º URL-–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –ø—É—Ç—å –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
    return {
        'service_urls': app.config.get('service_urls', {}),
        'active_data_file': get_active_data_path()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
    }

@app.context_processor
def inject_yubikey_status():
    """–ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å YubiKey –≤–æ –≤—Å–µ —à–∞–±–ª–æ–Ω—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        from flask import has_request_context
        if not has_request_context():
            print("‚ö†Ô∏è inject_yubikey_status –≤—ã–∑–≤–∞–Ω –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞")
            return {
                'yubikey_status': {
                    'available': yubikey_auth is not None,
                    'enabled': yubikey_auth.enabled if yubikey_auth else False,
                    'authenticated': False,  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    'keys_count': len(yubikey_auth.get_keys()) if yubikey_auth else 0
                }
            }
        
        yubikey_status = {
            'available': yubikey_auth is not None,
            'enabled': yubikey_auth.enabled if yubikey_auth else False,
            'authenticated': yubikey_auth.is_authenticated() if yubikey_auth else False,
            'keys_count': len(yubikey_auth.get_keys()) if yubikey_auth else 0
        }
        return {'yubikey_status': yubikey_status}
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ inject_yubikey_status: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            'yubikey_status': {
                'available': False,
                'enabled': False,
                'authenticated': False,
                'keys_count': 0
            }
        }

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

def check_ip_access():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø —Å —Ç–µ–∫—É—â–µ–≥–æ IP."""
    client_ip = request.remote_addr
    if client_ip not in ALLOWED_IPS:
        log_security_event("ACCESS_DENIED", f"IP: {client_ip}", client_ip)
        abort(403, description="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω —Å –≤–∞—à–µ–≥–æ IP-–∞–¥—Ä–µ—Å–∞")

@app.before_request
def before_request_security():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
    check_ip_access()

# --- NEW, ROBUST LOGIC FOR SECRET_KEY ---
SECRET_KEY = None
is_frozen = getattr(sys, 'frozen', False)

if is_frozen:
    # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ, –∏—â–µ–º .env –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞-–∑–∞–≤–∏—Å–∏–º—ã—Ö –º–µ—Å—Ç–∞—Ö
    try:
        dotenv_candidates = []
        if sys.platform == 'win32':
            # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è Windows: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            dotenv_candidates.append(Path(APP_DATA_DIR) / '.env')
            # –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º —Ä—è–¥–æ–º —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–æ–º
            dotenv_candidates.append(Path(sys.executable).parent / '.env')
        elif sys.platform == 'darwin':
            base_path = Path(sys.executable).parent.parent / 'Resources'
            dotenv_candidates.append(base_path / '.env')
        else:
            # Linux –∏ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º—ã
            dotenv_candidates.append(Path(APP_DATA_DIR) / '.env')
            dotenv_candidates.append(Path(sys.executable).parent / '.env')
        for _p in dotenv_candidates:
            if _p.exists():
                load_dotenv(dotenv_path=_p)
                SECRET_KEY = os.getenv("SECRET_KEY")
                if SECRET_KEY:
                    break
    except Exception:
        SECRET_KEY = None
else:
    # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –∏—â–µ–º .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    load_dotenv()
    SECRET_KEY = os.getenv("SECRET_KEY")

# –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
if not SECRET_KEY:
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
        new_key = Fernet.generate_key().decode()
        SECRET_KEY = new_key
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ .env —Ñ–∞–π–ª
        if is_frozen:
            # –î–ª—è –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            env_file = os.path.join(APP_DATA_DIR, '.env')
        else:
            # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
            env_file = '.env'
        
        with open(env_file, 'w') as f:
            f.write(f'SECRET_KEY={new_key}\n')
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {env_file}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞: {e}")
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ä–∞–±–æ—Ç—ã
        SECRET_KEY = Fernet.generate_key().decode()

fernet = Fernet(SECRET_KEY.encode())

def encrypt_data(data):
    if not data:
        return ""
    return fernet.encrypt(data.encode()).decode()

def decrypt_data(encrypted_data):
    """
    –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é Fernet.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞—á–∞–ª–µ
    if not encrypted_data or encrypted_data == "" or encrypted_data is None:
        return ""
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not isinstance(encrypted_data, str):
        encrypted_data = str(encrypted_data)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    if encrypted_data.strip() == "":
        return ""
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å gAAAAA –∏–ª–∏ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ Fernet –¥–∞–Ω–Ω—ã–µ
    if encrypted_data.startswith('gAAAAA') or (len(encrypted_data) > 50 and not ' ' in encrypted_data):
        try:
            return fernet.decrypt(encrypted_data.encode()).decode()
        except Exception:
            # –ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            return "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã —Å—Ç–∞—Ä—ã–º –∫–ª—é—á–æ–º"
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
    if all(ord(c) < 128 and (c.isprintable() or c.isspace()) for c in encrypted_data) and len(encrypted_data) < 100:
        return encrypted_data
    
    # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ (–¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    try:
        import base64
        # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ base64
        decoded = base64.b64decode(encrypted_data)
        
        # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–ª–æ—Å—å –∏ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ Fernet –¥–∞–Ω–Ω—ã–µ, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å
        if len(decoded) >= 57:
            try:
                return fernet.decrypt(encrypted_data.encode()).decode()
            except Exception:
                return "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã —Å—Ç–∞—Ä—ã–º –∫–ª—é—á–æ–º"
        else:
            return encrypted_data
    except Exception:
        # –ï—Å–ª–∏ —ç—Ç–æ —è–≤–Ω–æ –Ω–µ —Ç–µ–∫—Å—Ç –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã —Å—Ç–∞—Ä—ã–º –∫–ª—é—á–æ–º"
def save_app_config():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª."""
    # –°–Ω–∞—á–∞–ª–∞ —á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ app.config
    config_path = os.path.join(APP_DATA_DIR, 'config.json')
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config_to_save = json.load(f)
            if not isinstance(config_to_save, dict):
                config_to_save = {}
    except (FileNotFoundError, json.JSONDecodeError):
        config_to_save = {}

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ app.config, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ JSON
    for key in ['version', 'developer', 'service_urls', 'app_info']:
        if key in app.config:
            config_to_save[key] = app.config[key]
            
    # –û—Å–æ–±–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º active_data_file
    if app.config.get('active_data_file'):
        config_to_save['active_data_file'] = app.config['active_data_file']
    else:
        # –£–¥–∞–ª—è–µ–º –∫–ª—é—á, –µ—Å–ª–∏ –æ–Ω None –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        config_to_save.pop('active_data_file', None)
        
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(config_to_save, f, ensure_ascii=False, indent=2)

def get_active_data_path():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    path = app.config.get('active_data_file')
    if path:
        # –ï—Å–ª–∏ –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ APP_DATA_DIR
        if not os.path.isabs(path):
            return os.path.join(APP_DATA_DIR, path)
        return path
    return None

def get_export_dir():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–æ–≤."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É Downloads –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
    downloads_dir = os.path.join(os.path.expanduser("~"), "Downloads")
    if os.path.exists(downloads_dir) and os.access(downloads_dir, os.W_OK):
        return downloads_dir
    
    # –ï—Å–ª–∏ Downloads –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º APP_DATA_DIR
    return APP_DATA_DIR


def get_day_with_suffix(d):
    return str(d) + ("th" if 4 <= d <= 20 or 24 <= d <= 30 else {1: "st", 2: "nd", 3: "rd"}.get(d % 10, "th"))

def analyze_hosting(ip_info):
    if not ip_info:
        return {"text": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "quality": "secondary"}
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–æ–≤, VPN –∏ –¥–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä–æ–≤
    bad_keywords = [
        # –û–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
        'hosting', 'vpn', 'proxy', 'datacenter', 'vps', 'server', 'cloud', 'cdn', 'dedicated',
        
        # –ö—Ä—É–ø–Ω—ã–µ —Ö–æ—Å—Ç–∏–Ω–≥-–ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏ –æ–±–ª–∞–∫–∞
        'hetzner', 'ovh', 'digitalocean', 'linode', 'vultr', 'contabo', 'leaseweb', 'scaleway',
        'amazon', 'aws', 'google', 'gcp', 'microsoft', 'azure', 'oracle', 'ionos', 'upcloud',
        'godaddy', 'bluehost', 'hostgator', 'dreamhost', 'liquidweb', 'choopa', 'frantech',
        'datacamp', # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ —Å–ª—É—á–∞—è
        
        # –ù–∞–∑–≤–∞–Ω–∏—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö VPN-—Å–µ—Ä–≤–∏—Å–æ–≤
        'nord', 'expressvpn', 'cyberghost', 'private internet access', 'pia', 'surfshark',
        'vyprvpn', 'tunnelbear', 'proton'
    ]
    
    org = ip_info.get('org', '').lower()
    for keyword in bad_keywords:
        if keyword in org:
            return {"text": "–•–æ—Å—Ç–∏–Ω–≥", "quality": "danger"}

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å .get('hosting') –Ω–∞ .get('host')
    if ip_info.get('hosting', {}).get('host'):
         return {"text": "–•–æ—Å—Ç–∏–Ω–≥", "quality": "danger"}

    return {"text": "ISP/Residential", "quality": "success"}

def load_ai_services():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä—ã –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
    active_file = get_active_data_path()
    if not active_file or not os.path.exists(active_file):
        return []

    try:
        with open(active_file, 'rb') as f:
            encrypted_data = f.read()

        if not encrypted_data:
            return []

        decrypted_data = fernet.decrypt(encrypted_data)
        servers = json.loads(decrypted_data.decode('utf-8'))
        
        today = date.today()
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for server in servers:
            # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏
            if 'status' not in server:
                server['status'] = 'Active' # –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if 'payment_info' not in server:
                server['payment_info'] = {}
            if 'payment_period' not in server['payment_info']:
                server['payment_info']['payment_period'] = ''
            if 'panel_credentials' not in server:
                server['panel_credentials'] = {}
            if 'hoster_credentials' not in server:
                server['hoster_credentials'] = {}
            if 'login_method' not in server.get('hoster_credentials', {}):
                server['hoster_credentials']['login_method'] = 'password'
            if 'geolocation' not in server:
                server['geolocation'] = {}
            if 'checks' not in server:
                server['checks'] = {"dns_ok": False, "streaming_ok": False}

            if "ssh_credentials" in server:
                if 'root_password' not in server['ssh_credentials']:
                    server['ssh_credentials']['root_password'] = ''
                if 'root_login_allowed' not in server['ssh_credentials']:
                    server['ssh_credentials']['root_login_allowed'] = False
                server["ssh_credentials"]["password_decrypted"] = decrypt_data(server["ssh_credentials"].get("password", ""))
                server["ssh_credentials"]["root_password_decrypted"] = decrypt_data(server["ssh_credentials"].get("root_password", ""))
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–∞
            due_date_str = server.get('payment_info', {}).get('next_due_date')
            if server.get('status') == 'Active' and due_date_str:
                try:
                    due_date = datetime.strptime(due_date_str, '%Y-%m-%d').date()
                    if due_date < today:
                        delta = today - due_date
                        if delta.days > 5:
                            server['status'] = '–£–¥–∞–ª–µ–Ω'
                        else:
                            server['status'] = '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
                except (ValueError, TypeError):
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã

            # –ê–Ω–∞–ª–∏–∑ —Ö–æ—Å—Ç–∏–Ω–≥–∞
            server['hosting_analysis'] = analyze_hosting(server.get('geolocation'))

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            due_date_str = server.get('payment_info', {}).get('next_due_date')
            if due_date_str:
                try:
                    date_obj = datetime.strptime(due_date_str, '%Y-%m-%d').date()
                    day_with_suffix = get_day_with_suffix(date_obj.day)
                    server['payment_info']['formatted_date'] = date_obj.strftime(f'%B {day_with_suffix}, %Y')
                except (ValueError, TypeError):
                    server['payment_info']['formatted_date'] = due_date_str
            else:
                server['payment_info']['formatted_date'] = 'N/A'


            if "ssh_credentials" in server and "password" in server["ssh_credentials"]:
                pass # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤—ã—à–µ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
            
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if "panel_credentials" in server:
                server["panel_credentials"]["user_decrypted"] = decrypt_data(server["panel_credentials"].get("user", ""))
                server["panel_credentials"]["password_decrypted"] = decrypt_data(server["panel_credentials"].get("password", ""))

            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç–∞ —Ö–æ—Å—Ç–µ—Ä–∞
            if "hoster_credentials" in server:
                server["hoster_credentials"]["user_decrypted"] = decrypt_data(server["hoster_credentials"].get("user", ""))
                server["hoster_credentials"]["password_decrypted"] = decrypt_data(server["hoster_credentials"].get("password", ""))

            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (credentials)
            if "credentials" in server:
                server["credentials"]["username_decrypted"] = decrypt_data(server["credentials"].get("username", ""))
                server["credentials"]["password_decrypted"] = decrypt_data(server["credentials"].get("password", ""))
                server["credentials"]["additional_info_decrypted"] = decrypt_data(server["credentials"].get("additional_info", ""))

            if 'receipts' in server.get('payment_info', {}):
                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —á–µ–∫–æ–≤ –ø–æ –¥–∞—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
                server['payment_info']['receipts'].sort(key=lambda r: r.get('upload_date', ''), reverse=True)

        return servers
    except (FileNotFoundError, json.JSONDecodeError):
        return []
    except (InvalidToken, Exception):
        # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
        flash('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à SECRET_KEY –∏–ª–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞.', 'danger')
        return []

def save_ai_services(servers):
    """–®–∏—Ñ—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª."""
    active_file = get_active_data_path()
    if not active_file:
        flash('–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.', 'danger')
        return

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, —É–¥–∞–ª—è—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    servers_to_save = copy.deepcopy(servers)
    for server in servers_to_save:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏
        if 'ssh_credentials' in server:
            server['ssh_credentials'].pop('password_decrypted', None)
            server['ssh_credentials'].pop('root_password_decrypted', None)
        if 'panel_credentials' in server:
            server['panel_credentials'].pop('user_decrypted', None)
            server['panel_credentials'].pop('password_decrypted', None)
        if 'hoster_credentials' in server:
            server['hoster_credentials'].pop('user_decrypted', None)
            server['hoster_credentials'].pop('password_decrypted', None)
        if 'credentials' in server:
            server['credentials'].pop('username_decrypted', None)
            server['credentials'].pop('password_decrypted', None)
            server['credentials'].pop('additional_info_decrypted', None)
        
        # –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–ª—è UI
        server.pop('hosting_analysis', None)
        server.pop('os_icon', None)
        server.pop('masked_panel_url', None)
        if 'payment_info' in server:
            server['payment_info'].pop('formatted_date', None)

    try:
        json_string = json.dumps(servers_to_save, ensure_ascii=False, indent=2)
        encrypted_data = fernet.encrypt(json_string.encode('utf-8'))
        
        with open(active_file, 'wb') as f:
            f.write(encrypted_data)
    except Exception as e:
        flash(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}', 'danger')


def re_encrypt_service_data(service, external_fernet, current_fernet):
    """
    –ü–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è —Å–µ—Ä–≤–∏—Å–∞ —Å –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –∫–ª—é—á.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–µ—Ä–≤–∏—Å, –≤–Ω–µ—à–Ω–∏–π fernet –æ–±—ä–µ–∫—Ç –∏ —Ç–µ–∫—É—â–∏–π fernet –æ–±—ä–µ–∫—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–≤–∏—Å —Å –ø–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    """
    service_copy = copy.deepcopy(service)
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∫–∏
    fields_to_reencrypt = [
        ('credentials', 'username'),
        ('credentials', 'password'),
        ('credentials', 'additional_info'),
        ('personal_cabinet', 'account_email'),
        ('ssh_credentials', 'password'),
        ('ssh_credentials', 'root_password'),
        ('panel_credentials', 'user'),
        ('panel_credentials', 'password'),
        ('hoster_credentials', 'user'),
        ('hoster_credentials', 'password')
    ]
    
    for section, field in fields_to_reencrypt:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ–∫—Ü–∏—è –∏ –ø–æ–ª–µ
            if section in service_copy and field in service_copy[section]:
                encrypted_value = service_copy[section][field]
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if not encrypted_value or encrypted_value == "":
                    continue
                
                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–º –∫–ª—é—á–æ–º
                try:
                    decrypted_value = external_fernet.decrypt(encrypted_value.encode()).decode()
                    # –ó–∞—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–º –∫–ª—é—á–æ–º
                    reencrypted_value = current_fernet.encrypt(decrypted_value.encode()).decode()
                    service_copy[section][field] = reencrypted_value
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–º –∫–ª—é—á–æ–º, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —É–∂–µ —Ç–µ–∫—É—â–∏–π –∫–ª—é—á
                    # –∏–ª–∏ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    continue
                    
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å —Å–µ–∫—Ü–∏–µ–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
            continue
    
    return service_copy


def generate_search_hints():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    try:
        services = load_ai_services()
        hints = []
        
        for service in services:
            if service.get('name'):
                hints.append(service['name'])
            if service.get('provider'):
                hints.append(service['provider'])
            if service.get('service_type'):
                hints.append(service['service_type'])
                
        hints = list(set(hints))  # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        hints.sort()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ JSON —Ñ–∞–π–ª
        with open('static/search_hints.json', 'w', encoding='utf-8') as f:
            json.dump(hints, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ–∏—Å–∫–∞: {e}")

def migrate_data():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ `servers.json`
    –≤ –Ω–æ–≤—ã–π –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π `servers.json.enc`.
    –¢–∞–∫–∂–µ –º–∏–≥—Ä–∏—Ä—É–µ—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –≤ —Å—Ç–∞—Ä–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    old_json_path = 'data/servers.json'
    old_enc_path = 'data/servers.json.enc'
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –Ω–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    new_enc_path = os.path.join(APP_DATA_DIR, 'data', 'servers.json.enc')
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ json –≤ –Ω–æ–≤—ã–π enc
    if os.path.exists(old_json_path) and not os.path.exists(old_enc_path) and not os.path.exists(new_enc_path):
        print("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è...")
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            with open(old_json_path, 'r', encoding='utf-8') as f:
                servers = json.load(f)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ –Ω–æ–≤–æ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –≤ –Ω–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            json_string = json.dumps(servers, ensure_ascii=False, indent=2)
            encrypted_data = fernet.encrypt(json_string.encode('utf-8'))
            with open(new_enc_path, 'wb') as f:
                f.write(encrypted_data)

            # –û–±–Ω–æ–≤–ª—è–µ–º config.json, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            app.config['active_data_file'] = os.path.join('data', 'ai_services.json.enc')
            save_app_config()
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
            os.rename(old_json_path, old_json_path + '.bak')
            print(f"–ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {new_enc_path}.")
            print(f"–°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ {old_json_path}.bak.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    elif os.path.exists(old_enc_path) and not os.path.exists(new_enc_path):
        print("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é...")
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            os.makedirs(os.path.dirname(new_enc_path), exist_ok=True)
            with open(old_enc_path, 'rb') as src, open(new_enc_path, 'wb') as dst:
                dst.write(src.read())
            
            # –û–±–Ω–æ–≤–ª—è–µ–º config.json, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            app.config['active_data_file'] = os.path.join('data', 'ai_services.json.enc')
            save_app_config()
            
            print(f"–ú–∏–≥—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –≤ –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    active_file = get_active_data_path()
    if not active_file or not os.path.exists(active_file):
        print("–ê–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        default_path = os.path.join('data', 'ai_services.json.enc')
        full_path = os.path.join(APP_DATA_DIR, default_path)
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(full_path):
            try:
                json_string = json.dumps([], ensure_ascii=False, indent=2)
                encrypted_data = fernet.encrypt(json_string.encode('utf-8'))
                os.makedirs(os.path.dirname(full_path), exist_ok=True)
                with open(full_path, 'wb') as f:
                    f.write(encrypted_data)
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º config.json, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                app.config['active_data_file'] = default_path
                save_app_config()
                
                print(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {full_path}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
migrate_data()
migrate_data()

# OAuth —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤—Ö–æ–¥–∞
def get_all_oauth_methods(service_name):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ OAuth –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
    """
    all_methods = {}
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –º–µ—Ç–æ–¥—ã
    specific = get_service_specific_oauth(service_name)
    all_methods.update(specific)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    universal = get_oauth_urls(service_name)
    all_methods.update(universal)
    
    return all_methods

def get_selected_oauth_method(service):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π OAuth –º–µ—Ç–æ–¥ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
    """
    preferred_method = service.get('preferred_oauth_method')
    if not preferred_method:
        return None
        
    all_methods = get_all_oauth_methods(service.get('name', 'Unknown'))
    return all_methods.get(preferred_method)

# OAuth —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–æ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–∞—Ä—à—Ä—É—Ç–∞—Ö)
def get_oauth_urls(service_name):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å OAuth URL –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    """
    oauth_providers = {
        'google': {
            'name': 'Google',
            'url': f'https://accounts.google.com/oauth/authorize?client_id=YOUR_CLIENT_ID&redirect_uri=YOUR_REDIRECT_URI&scope=openid%20email%20profile&response_type=code&service={service_name}',
            'icon': 'üîê',
            'class': 'btn-google'
        },
        'apple': {
            'name': 'Apple ID',
            'url': f'https://appleid.apple.com/auth/authorize?client_id=YOUR_CLIENT_ID&redirect_uri=YOUR_REDIRECT_URI&response_type=code&scope=name%20email&service={service_name}',
            'icon': 'üçé',
            'class': 'btn-apple'
        },
        'github': {
            'name': 'GitHub',
            'url': f'https://github.com/login/oauth/authorize?client_id=YOUR_CLIENT_ID&redirect_uri=YOUR_REDIRECT_URI&scope=user:email&service={service_name}',
            'icon': 'üêô',
            'class': 'btn-github'
        },
        'microsoft': {
            'name': 'Microsoft',
            'url': f'https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=YOUR_CLIENT_ID&response_type=code&redirect_uri=YOUR_REDIRECT_URI&scope=openid%20email%20profile&service={service_name}',
            'icon': 'ü™ü',
            'class': 'btn-microsoft'
        }
    }
    return oauth_providers

def get_service_specific_oauth(service_name):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ OAuth —Å—Å—ã–ª–∫–∏
    """
    service_lower = service_name.lower()
    
    if 'cursor' in service_lower:
        return {
            'cursor': {
                'name': 'Cursor Account',
                'url': 'https://cursor.sh/login',
                'icon': '‚ö°',
                'class': 'btn-primary'
            }
        }
    elif 'chatgpt' in service_lower or 'openai' in service_lower:
        return {
            'openai': {
                'name': 'OpenAI Account',
                'url': 'https://chat.openai.com/auth/login',
                'icon': 'ü§ñ',
                'class': 'btn-primary'
            }
        }
    elif 'medium' in service_lower:
        return {
            'medium': {
                'name': 'Medium Account',
                'url': 'https://medium.com/m/signin',
                'icon': 'üìù',
                'class': 'btn-primary'
            }
        }
    elif 'notion' in service_lower:
        return {
            'notion': {
                'name': 'Notion Account',
                'url': 'https://www.notion.so/login',
                'icon': 'üìÑ',
                'class': 'btn-primary'
            }
        }
    elif 'figma' in service_lower:
        return {
            'figma': {
                'name': 'Figma Account',
                'url': 'https://www.figma.com/login',
                'icon': 'üé®',
                'class': 'btn-primary'
            }
        }
    
    return {}

@app.template_filter('encrypt_warning')
def encrypt_warning_filter(text):
    """
    –§–∏–ª—å—Ç—Ä –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    if isinstance(text, str) and "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã —Å—Ç–∞—Ä—ã–º –∫–ª—é—á–æ–º" in text:
        return f'<span class="encrypted-data-warning">{text}</span>'
    return text

@app.after_request
def add_security_headers(response):
    response.headers['Cache-Control'] = 'no-store, no-cache, must-revalidate, max-age=0'
    response.headers['Pragma'] = 'no-cache'
    response.headers['Expires'] = '0'
    response.headers.add("Access-Control-Allow-Origin", "*")
    return response

@app.errorhandler(500)
def internal_error(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞."""
    print(f"‚ùå Internal Server Error: {error}")
    import traceback
    traceback.print_exc()
    return render_template('error.html', error=error), 500

@app.route('/')
@yubikey_auth.require_auth if yubikey_auth else (lambda f: f)
def index():
    servers = load_ai_services()
    
    def get_os_icon(os_name):
        os_lower = os_name.lower()
        if 'windows' in os_lower:
            return 'bi-windows'
        if 'ubuntu' in os_lower:
            return 'bi-box-seam'
        if 'debian' in os_lower:
            return 'bi-box'
        if 'centos' in os_lower:
            return 'bi-archive'
        if 'linux' in os_lower:
            return 'bi-server'
        return 'bi-question-circle'
    
    def mask_url_path(url_string):
        if not url_string or not url_string.strip():
            return "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã —Å—Ç–∞—Ä—ã–º –∫–ª—é—á–æ–º"
        try:
            parsed = urlparse(url_string)
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ö–µ–º—É –∏ —Ö–æ—Å—Ç. –î–æ–±–∞–≤–ª—è–µ–º /... –µ—Å–ª–∏ –µ—Å—Ç—å –ø—É—Ç—å –∏–ª–∏ –ø–æ—Ä—Ç.
            display_url = f"{parsed.scheme}://{parsed.hostname}"
            has_path = parsed.path and parsed.path != '/'
            has_port = parsed.port is not None
            if has_path or has_port:
                display_url += "/..."
            else:
                return url_string # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ —Å–∫—Ä—ã–≤–∞—Ç—å
            return display_url
        except Exception:
            return url_string 

    for server in servers:
        server['os_icon'] = get_os_icon(server.get('os', ''))
        server['masked_panel_url'] = mask_url_path(server.get('panel_url', ''))
        
    return render_template('index.html', 
                          servers=servers,
                          get_oauth_urls=get_oauth_urls,
                          get_service_specific_oauth=get_service_specific_oauth,
                          get_selected_oauth_method=get_selected_oauth_method,
                          get_all_oauth_methods=get_all_oauth_methods)

@app.route('/uploads/<path:filename>')
def uploaded_file(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

@app.route('/add', methods=['GET', 'POST'])
@yubikey_auth.require_auth if yubikey_auth else lambda f: f
def add_service():
    if request.method == 'POST':
        services = load_ai_services()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        if services:
            new_service_id = max(s.get('id', 0) for s in services) + 1
        else:
            new_service_id = 1

        new_service = {
            "id": new_service_id,
            "name": request.form.get('name'),
            "service_type": request.form.get('service_type'),
            "provider": request.form.get('provider'),
            "login_url": request.form.get('login_url'),
            "preferred_oauth_method": request.form.get('preferred_oauth_method'),
            "credentials": {
                "username": encrypt_data(request.form.get('username')),
                "password": encrypt_data(request.form.get('password')),
                "additional_info": encrypt_data(request.form.get('additional_info'))
            },
            "subscription": {
                "plan_name": request.form.get('plan_name'),
                "cost_monthly": float(request.form.get('cost_monthly')) if request.form.get('cost_monthly') else 0.0,
                "currency": request.form.get('currency'),
                "billing_cycle": request.form.get('billing_cycle'),
                "next_payment_date": request.form.get('next_payment_date'),
                "auto_renewal": 'auto_renewal' in request.form,
                "payment_method": request.form.get('payment_method'),
                "notes": request.form.get('subscription_notes')
            },
            "personal_cabinet": {
                "dashboard_url": request.form.get('dashboard_url'),
                "account_email": encrypt_data(request.form.get('account_email'))
            },
            "features": [f.strip() for f in request.form.get('features', '').split(',') if f.strip()],
            "status": request.form.get('status'),
            "notes": request.form.get('notes'),
            "created_at": datetime.now().isoformat(),
            "updated_at": datetime.now().isoformat()
        }

        # –ì—Ä–∞–¥–∏–µ–Ω—Ç
        new_service['gradient_color'] = request.form.get('gradient_color', '#667eea')
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
        base_rgb = [
            int(new_service['gradient_color'][1:3], 16),
            int(new_service['gradient_color'][3:5], 16),
            int(new_service['gradient_color'][5:7], 16)
        ]
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —Ç–µ–º–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫
        darker_rgb = [
            max(0, min(255, int(base_rgb[0] * 0.7))),
            max(0, min(255, int(base_rgb[1] * 0.7))),
            max(0, min(255, int(base_rgb[2] * 0.7)))
        ]
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ hex
        gradient_color2 = '#{:02x}{:02x}{:02x}'.format(darker_rgb[0], darker_rgb[1], darker_rgb[2])
        
        new_service['gradient_color1'] = new_service['gradient_color']
        new_service['gradient_color2'] = gradient_color2
        new_service['gradient_css'] = f"linear-gradient(135deg, {new_service['gradient_color1']} 0%, {new_service['gradient_color2']} 100%)"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∫–æ–Ω–∫–∏
        if 'icon_filename' in request.files:
            file = request.files['icon_filename']
            if file and file.filename != '':
                filename = secure_filename(file.filename)
                # –î–æ–±–∞–≤–ª—è–µ–º ID –∫ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                unique_filename = f"{new_service_id}_{filename}"
                file.save(os.path.join(app.config['UPLOAD_FOLDER'], unique_filename))
                new_service['icon_filename'] = unique_filename

        services.append(new_service)
        save_ai_services(services)
        flash('AI-—Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', 'success')
        return redirect(url_for('index'))
    
    # –î–ª—è GET –∑–∞–ø—Ä–æ—Å–∞
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—É –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
    try:
        schema_path = 'ai_services_schema.json'
        if getattr(sys, 'frozen', False):
            schema_path = os.path.join(sys._MEIPASS, schema_path)
        print(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ö–µ–º—ã: {schema_path}")
        with open(schema_path, 'r', encoding='utf-8') as f:
            schema = json.load(f)
        print(f"‚úÖ –°—Ö–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(schema)} –∫–ª—é—á–µ–π")
    except (FileNotFoundError, json.JSONDecodeError) as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ö–µ–º—ã: {e}")
        print(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        try:
            create_default_schema()
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            with open('ai_services_schema.json', 'r', encoding='utf-8') as f:
                schema = json.load(f)
                print(f"‚úÖ –°—Ö–µ–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e2:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e2}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ö–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∫–æ–¥–µ
            schema = {
                "service_types": [
                    "AI Development Tool", 
                    "AI Writing Assistant", 
                    "AI Image Generator", 
                    "AI Video Generator", 
                    "Media Platform", 
                    "Professional Network", 
                    "Cloud Service", 
                    "Productivity Tool"
                ],
                "supported_currencies": ["USD", "EUR", "RUB", "GBP"],
                "billing_cycles": ["weekly", "monthly", "quarterly", "yearly"],
                "status_options": ["active", "inactive", "trial", "expired", "cancelled"]
            }
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞")
    
    return render_template('add_service.html', schema=schema)

@app.route('/delete/<service_id>', methods=['POST'])
@yubikey_auth.require_auth if yubikey_auth else (lambda f: f)
def delete_service(service_id):
    services = load_ai_services()
    # –ü—Ä–∏–≤–æ–¥–∏–º service_id –∫ int –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏
    try:
        service_id_int = int(service_id)
    except ValueError:
        flash('–ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–µ—Ä–≤–∏—Å–∞.', 'danger')
        return redirect(url_for('index'))
    
    service_to_delete = next((s for s in services if s['id'] == service_id_int), None)
    
    if service_to_delete:
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∫–æ–Ω–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if service_to_delete.get('icon_filename'):
            try:
                os.remove(os.path.join(app.config['UPLOAD_FOLDER'], service_to_delete['icon_filename']))
            except OSError as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∫–æ–Ω–∫–∏: {e}")
                flash(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–∫–æ–Ω–∫–∏: {service_to_delete['icon_filename']}", 'warning')

        services = [s for s in services if s['id'] != service_id_int]
        save_ai_services(services)
        flash('AI-—Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.', 'success')
    else:
        flash('AI-—Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.', 'danger')
        
    return redirect(url_for('index'))


@app.route('/edit/<service_id>', methods=['GET', 'POST'])
@yubikey_auth.require_auth if yubikey_auth else (lambda f: f)
def edit_service(service_id):
    services = load_ai_services()
    
    # –ü—Ä–∏–≤–æ–¥–∏–º service_id –∫ int –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏
    try:
        service_id_int = int(service_id)
    except ValueError:
        flash('–ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–µ—Ä–≤–∏—Å–∞.', 'danger')
        return redirect(url_for('index'))
    
    service = next((s for s in services if s['id'] == service_id_int), None)
    
    if service is None:
        flash('AI-—Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.', 'danger')
        return redirect(url_for('index'))

    # –î–µ—à–∏—Ñ—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ
    decrypted_service = copy.deepcopy(service)
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    if 'credentials' not in decrypted_service or not isinstance(decrypted_service.get('credentials'), dict):
        decrypted_service['credentials'] = {}
    if 'personal_cabinet' not in decrypted_service or not isinstance(decrypted_service.get('personal_cabinet'), dict):
        decrypted_service['personal_cabinet'] = {}
    if 'subscription' not in decrypted_service or not isinstance(decrypted_service.get('subscription'), dict):
        decrypted_service['subscription'] = {}
    if 'features' not in decrypted_service or not isinstance(decrypted_service.get('features'), list):
        decrypted_service['features'] = []
    if 'gradient_color' not in decrypted_service or not decrypted_service.get('gradient_color'):
        decrypted_service['gradient_color'] = '#667eea'
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —à–∞–±–ª–æ–Ω–æ–º
    decrypted_service['subscription'].setdefault('plan_name', '')
    decrypted_service['subscription'].setdefault('cost_monthly', 0.0)
    decrypted_service['subscription'].setdefault('currency', 'USD')
    decrypted_service['subscription'].setdefault('billing_cycle', 'monthly')
    decrypted_service['subscription'].setdefault('next_payment_date', '')
    decrypted_service['subscription'].setdefault('auto_renewal', False)
    decrypted_service['subscription'].setdefault('payment_method', '')
    decrypted_service['subscription'].setdefault('notes', '')
    decrypted_service['personal_cabinet'].setdefault('dashboard_url', '')
    
    decrypted_service['credentials']['username'] = decrypt_data(service.get('credentials', {}).get('username'))
    decrypted_service['credentials']['additional_info'] = decrypt_data(service.get('credentials', {}).get('additional_info'))
    decrypted_service['personal_cabinet']['account_email'] = decrypt_data(service.get('personal_cabinet', {}).get('account_email'))
    
    if request.method == 'POST':
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        service['name'] = request.form.get('name')
        service['service_type'] = request.form.get('service_type')
        service['provider'] = request.form.get('provider')
        service['login_url'] = request.form.get('login_url')
        service['preferred_oauth_method'] = request.form.get('preferred_oauth_method')
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if 'credentials' not in service or not isinstance(service.get('credentials'), dict):
            service['credentials'] = {}
        service['credentials']['username'] = encrypt_data(request.form.get('username'))
        if request.form.get('password'): # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤–≤–µ–¥–µ–Ω
            service['credentials']['password'] = encrypt_data(request.form.get('password'))
        service['credentials']['additional_info'] = encrypt_data(request.form.get('additional_info'))

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        service['subscription'] = {
            "plan_name": request.form.get('plan_name'),
            "cost_monthly": float(request.form.get('cost_monthly')) if request.form.get('cost_monthly') else 0.0,
            "currency": request.form.get('currency'),
            "billing_cycle": request.form.get('billing_cycle'),
            "next_payment_date": request.form.get('next_payment_date'),
            "auto_renewal": 'auto_renewal' in request.form,
            "payment_method": request.form.get('payment_method'),
            "notes": request.form.get('subscription_notes')
        }
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
        if 'personal_cabinet' not in service or not isinstance(service.get('personal_cabinet'), dict):
            service['personal_cabinet'] = {}
        service['personal_cabinet']['dashboard_url'] = request.form.get('dashboard_url')
        service['personal_cabinet']['account_email'] = encrypt_data(request.form.get('account_email'))
        
        service['features'] = [f.strip() for f in request.form.get('features', '').split(',') if f.strip()]
        service['status'] = request.form.get('status')
        service['notes'] = request.form.get('notes')
        service['updated_at'] = datetime.now().isoformat()
        
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç
        service['gradient_color'] = request.form.get('gradient_color', '#667eea')
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
        base_rgb = [
            int(service['gradient_color'][1:3], 16),
            int(service['gradient_color'][3:5], 16),
            int(service['gradient_color'][5:7], 16)
        ]
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —Ç–µ–º–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫
        darker_rgb = [
            max(0, min(255, int(base_rgb[0] * 0.7))),
            max(0, min(255, int(base_rgb[1] * 0.7))),
            max(0, min(255, int(base_rgb[2] * 0.7)))
        ]
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ hex
        gradient_color2 = '#{:02x}{:02x}{:02x}'.format(darker_rgb[0], darker_rgb[1], darker_rgb[2])
        
        service['gradient_color1'] = service['gradient_color']
        service['gradient_color2'] = gradient_color2
        service['gradient_css'] = f"linear-gradient(135deg, {service['gradient_color1']} 0%, {service['gradient_color2']} 100%)"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∫–æ–Ω–∫–∏
        if 'icon_filename' in request.files:
            file = request.files['icon_filename']
            if file and file.filename != '':
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∏–∫–æ–Ω–∫—É
                if service.get('icon_filename'):
                    try:
                        os.remove(os.path.join(app.config['UPLOAD_FOLDER'], service['icon_filename']))
                    except OSError:
                        pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
                
                filename = secure_filename(file.filename)
                unique_filename = f"{service['id']}_{filename}"
                file.save(os.path.join(app.config['UPLOAD_FOLDER'], unique_filename))
                service['icon_filename'] = unique_filename

        save_ai_services(services)
        flash('AI-—Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success')
        return redirect(url_for('index'))

    # –î–ª—è GET –∑–∞–ø—Ä–æ—Å–∞
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—É –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
    try:
        schema_path = 'ai_services_schema.json'
        if getattr(sys, 'frozen', False):
             schema_path = os.path.join(sys._MEIPASS, schema_path)
        print(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ö–µ–º—ã: {schema_path}")
        with open(schema_path, 'r', encoding='utf-8') as f:
            schema = json.load(f)
        print(f"‚úÖ –°—Ö–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(schema)} –∫–ª—é—á–µ–π")
    except (FileNotFoundError, json.JSONDecodeError) as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ö–µ–º—ã: {e}")
        print(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        try:
            create_default_schema()
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            with open('ai_services_schema.json', 'r', encoding='utf-8') as f:
                schema = json.load(f)
                print(f"‚úÖ –°—Ö–µ–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e2:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e2}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ö–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∫–æ–¥–µ
            schema = {
                "service_types": [
                    "AI Development Tool", 
                    "AI Writing Assistant", 
                    "AI Image Generator", 
                    "AI Video Generator", 
                    "Media Platform", 
                    "Professional Network", 
                    "Cloud Service", 
                    "Productivity Tool"
                ],
                "supported_currencies": ["USD", "EUR", "RUB", "GBP"],
                "billing_cycles": ["weekly", "monthly", "quarterly", "yearly"],
                "status_options": ["active", "inactive", "trial", "expired", "cancelled"]
            }
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞")
    
    return render_template('edit_service.html', service=decrypted_service, schema=schema)

@app.route('/service/<service_id>/receipts/add', methods=['POST'])
def add_receipt(service_id):
    services = load_ai_services()
    # –ü—Ä–∏–≤–æ–¥–∏–º service_id –∫ int –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏
    try:
        service_id_int = int(service_id)
    except ValueError:
        return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–µ—Ä–≤–∏—Å–∞'}), 400
    
    service = next((s for s in services if s['id'] == service_id_int), None)
    
    if service is None:
        return jsonify({'error': '–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

    if 'receipt_file' not in request.files:
        return jsonify({"error": "–§–∞–π–ª —á–µ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}), 400
    
    file = request.files['receipt_file']
    description = request.form.get('description', '–ß–µ–∫')

    if file and file.filename != '' and allowed_file(file.filename):
        original_filename = secure_filename(file.filename)
        timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
        unique_filename = f"{service_id}_{timestamp}_{original_filename}"
        
        file.save(os.path.join(app.config['UPLOAD_FOLDER'], unique_filename))
        
        if 'payment_info' not in service: service['payment_info'] = {}
        if 'receipts' not in service['payment_info']: service['payment_info']['receipts'] = []
            
        new_receipt = {
            'filename': unique_filename,
            'original_name': original_filename,
            'description': description,
            'upload_date': datetime.now().isoformat()
        }
        service['payment_info']['receipts'].append(new_receipt)
        
        save_ai_services(services)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —á–µ–∫ —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π –¥–ª—è UI
        new_receipt['formatted_date'] = datetime.fromisoformat(new_receipt['upload_date']).strftime('%Y-%m-%d %H:%M')
        return jsonify(new_receipt)
    
    return jsonify({"error": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–∞–π–ª"}), 400

@app.route('/service/<service_id>/receipts/delete/<path:filename>', methods=['POST'])
def delete_receipt(service_id, filename):
    services = load_ai_services()
    # –ü—Ä–∏–≤–æ–¥–∏–º service_id –∫ int –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏
    try:
        service_id_int = int(service_id)
    except ValueError:
        return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–µ—Ä–≤–∏—Å–∞'}), 400
    
    service = next((s for s in services if s['id'] == service_id_int), None)
    
    if service is None:
        return jsonify({'error': '–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

    receipts = service.get('payment_info', {}).get('receipts', [])
    receipt_to_delete = next((r for r in receipts if r.get('filename') == filename), None)
    
    if not receipt_to_delete:
        return jsonify({"error": "–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
    try:
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        if os.path.exists(filepath):
            os.remove(filepath)
    except OSError as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filepath}: {e}") # –õ–æ–≥–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ JSON
    service['payment_info']['receipts'].remove(receipt_to_delete)
    save_ai_services(services)
    
    return jsonify({"success": True, "message": "–ß–µ–∫ —É–¥–∞–ª–µ–Ω"})





@app.route('/help')
@yubikey_auth.require_auth if yubikey_auth else (lambda f: f)
def help_page():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø—Ä–∞–≤–∫–∏ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º TERMINAL_HELP.md."""
    return render_template('help.html')

@app.route('/about')
@yubikey_auth.require_auth if yubikey_auth else (lambda f: f)
def about_page():
    app_info = app.config.get('app_info', {})
    return render_template('about.html', app_info=app_info)


@app.route('/settings')
@yubikey_auth.require_auth if yubikey_auth else (lambda f: f)
def settings_page():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏."""
    return render_template('settings.html')

@app.route('/data/export')
@yubikey_auth.require_auth if yubikey_auth else (lambda f: f)
def export_data():
    """–û—Ç–¥–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    active_file = get_active_data_path()
    if not active_file or not os.path.exists(active_file):
        flash('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.', 'warning')
        return redirect(url_for('settings_page'))
    
    # –î–ª—è PyWebView —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ Downloads –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        export_filename = f"ai_services_export_{timestamp}.enc"
        export_dir = get_export_dir()
        export_path = os.path.join(export_dir, export_filename)
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É Downloads
        import shutil
        shutil.copy2(active_file, export_path)
        
        flash(f'‚úÖ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: {export_filename} –≤ –ø–∞–ø–∫—É Downloads', 'success')
        
        return send_from_directory(
                export_dir, 
            export_filename, 
        as_attachment=True
    )
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}', 'danger')
        return redirect(url_for('settings_page'))

@app.route('/data/export')
@yubikey_auth.require_auth if yubikey_auth else (lambda f: f)
def export_key():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç SECRET_KEY –≤ –≤–∏–¥–µ .env —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    try:
        # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ Downloads
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        key_filename = f"SECRET_KEY_{timestamp}.env"
        export_dir = get_export_dir()
        key_path = os.path.join(export_dir, key_filename)
        
        with open(key_path, 'w', encoding='utf-8') as f:
            f.write(f"SECRET_KEY={SECRET_KEY}\n")
            f.write(f"FLASK_SECRET_KEY=portable_app_key\n")
        
        flash(f'‚úÖ –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: {key_filename} –≤ –ø–∞–ø–∫—É Downloads', 'success')
        
        return send_from_directory(
            export_dir,
            key_filename,
            as_attachment=True
        )
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∫–ª—é—á–∞: {str(e)}', 'danger')
        return redirect(url_for('settings_page'))

@app.route('/data/export')
@yubikey_auth.require_auth if yubikey_auth else (lambda f: f)
def export_package():
    """–°–æ–∑–¥–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏, –∫–ª—é—á–æ–º –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏."""
    try:
        import zipfile
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
        active_file = get_active_data_path()
        if not active_file or not os.path.exists(active_file):
            flash('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.', 'warning')
            return redirect(url_for('settings_page'))
        
        # –°–æ–∑–¥–∞–µ–º ZIP —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ Downloads
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        zip_filename = f'ai_services_backup_{timestamp}.zip'
        export_dir = get_export_dir()
        zip_path = os.path.join(export_dir, zip_filename)
        
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞
            zipf.write(active_file, f"servers_{timestamp}.enc")
            
            # –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –∫–ª—é—á–æ–º
            env_content = f"SECRET_KEY={SECRET_KEY}\nFLASK_SECRET_KEY=portable_app_key\n"
            zipf.writestr("SECRET_KEY.env", env_content)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
            uploads_dir = os.path.join(get_app_data_dir(), "uploads")
            if os.path.exists(uploads_dir):
                for filename in os.listdir(uploads_dir):
                    file_path = os.path.join(uploads_dir, filename)
                    if os.path.isfile(file_path):
                        zipf.write(file_path, f"uploads/{filename}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º README —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            readme_content = f"""AI Manager - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
===========================================

–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞:
- servers_{timestamp}.enc - –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ AI-—Å–µ—Ä–≤–∏—Å–æ–≤
- SECRET_KEY.env - –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –ø–∞–ø–∫—É —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º)
- uploads/ - –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–∏–∫–æ–Ω–∫–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ç.–¥.)

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏–º–ø–æ—Ä—Ç—É:
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ SECRET_KEY.env –≤ –ø–∞–ø–∫—É —Å –Ω–æ–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π AI Manager
2. –ü–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ SECRET_KEY.env –≤ .env
3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
4. –í —Ä–∞–∑–¥–µ–ª–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" -> "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏" –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª servers_{timestamp}.enc
5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ uploads/ –≤ –ø–∞–ø–∫—É uploads/ –Ω–æ–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏

–í–ê–ñ–ù–û: –•—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∞—Ä—Ö–∏–≤ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ. –õ—é–±–æ–π, –∫—Ç–æ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–º—É,
–º–æ–∂–µ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ AI-—Å–µ—Ä–≤–∏—Å–∞—Ö!
"""
            zipf.writestr("README.txt", readme_content)
        
        flash(f'‚úÖ –ü–æ–ª–Ω—ã–π –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω –∫–∞–∫: {zip_filename} –≤ –ø–∞–ø–∫–µ Downloads', 'success')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ZIP —Ñ–∞–π–ª
        return send_from_directory(
            export_dir,
            zip_filename,
            as_attachment=True
        )
        
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {str(e)}', 'danger')
        return redirect(url_for('settings_page'))

@app.route('/data/import', methods=['POST'])
def import_data():
    global app_config
    try:
        uploaded_file = request.files['data_file']
        if uploaded_file and allowed_file(uploaded_file.filename) and uploaded_file.filename.endswith('.enc'):
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"imported_{timestamp}_{secure_filename(uploaded_file.filename)}"
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            app_data_dir = get_app_data_dir()
            data_dir = os.path.join(app_data_dir, "data")
            
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(data_dir, exist_ok=True)
            
            file_path = os.path.join(data_dir, filename)
            uploaded_file.save(file_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω —Å –Ω–∞—à–∏–º –∫–ª—é—á–æ–º
            try:
                with open(file_path, 'rb') as f:
                    encrypted_data = f.read()
                
                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å —Ç–µ–∫—É—â–∏–º –∫–ª—é—á–æ–º
                decrypted_data = fernet.decrypt(encrypted_data)
                servers_data = json.loads(decrypted_data.decode('utf-8'))
                
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω —Ç–µ–∫—É—â–∏–º –∫–ª—é—á–æ–º,
                # –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è, –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏–º –∫–ª—é—á–æ–º - –ø–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∏—Ö
                # (—ç—Ç–æ –º–æ–∂–µ—Ç —Å–ª—É—á–∏—Ç—å—Å—è –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–ª—é—á–∞ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–º –∏–º–ø–æ—Ä—Ç–µ)
                reencrypted_servers_data = []
                for server in servers_data:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–ª—é—á –¥–ª—è external –∏ current - –µ—Å–ª–∏ –ø–æ–ª—è —É–∂–µ
                    # –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã —Ç–µ–∫—É—â–∏–º –∫–ª—é—á–æ–º, —Ñ—É–Ω–∫—Ü–∏—è –∏—Ö –Ω–µ –∏–∑–º–µ–Ω–∏—Ç
                    reencrypted_server = re_encrypt_service_data(server, fernet, fernet)
                    reencrypted_servers_data.append(reencrypted_server)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
                json_string = json.dumps(reencrypted_servers_data, ensure_ascii=False, indent=2)
                encrypted_data = fernet.encrypt(json_string.encode('utf-8'))
                with open(file_path, 'wb') as f:
                    f.write(encrypted_data)
                
                flash('–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω!', 'success')
            except (InvalidToken, json.JSONDecodeError, Exception) as e:
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω
                os.remove(file_path)
                flash('–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —Å–æ–∑–¥–∞–Ω —Å –¥—Ä—É–≥–∏–º –∫–ª—é—á–æ–º.', 'danger')
                return redirect(url_for('settings_page'))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            app.config['active_data_file'] = file_path
            save_app_config()
            return redirect(url_for('settings_page'))
        else:
            flash('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª .enc', 'danger')
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞: {str(e)}', 'danger')
    return redirect(url_for('settings_page'))

@app.route('/data/import_external', methods=['POST'])
def import_external_data():
    global app_config
    try:
        uploaded_file = request.files['external_file']
        external_key = request.form.get('external_key', '').strip()
        
        if not uploaded_file or not external_key:
            flash('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –∏ —É–∫–∞–∑–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.', 'danger')
            return redirect(url_for('settings_page'))
            
        if not uploaded_file.filename.endswith('.enc'):
            flash('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª .enc', 'danger')
            return redirect(url_for('settings_page'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Fernet)
        try:
            # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä Fernet —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º
            # –≠—Ç–æ –ª—É—á—à–µ, —á–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞, —Ç–∞–∫ –∫–∞–∫ –∫–ª—é—á–∏ –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Ä–∞–∑–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
            test_fernet = Fernet(external_key.encode())
        except Exception:
            flash('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è. –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∫–ª—é—á–æ–º Fernet.', 'danger')
            return redirect(url_for('settings_page'))
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        import tempfile
        with tempfile.NamedTemporaryFile(delete=False) as temp_file:
            uploaded_file.save(temp_file.name)
            temp_file_path = temp_file.name
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª —Å –≤–Ω–µ—à–Ω–∏–º –∫–ª—é—á–æ–º
            fernet_external = Fernet(external_key.encode())
            with open(temp_file_path, 'rb') as f:
                encrypted_data = f.read()
            
            decrypted_data = fernet_external.decrypt(encrypted_data)
            servers_data = json.loads(decrypted_data.decode('utf-8'))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            if not isinstance(servers_data, list):
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
            
            # –î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∏—Ö —Å —Ç–µ–∫—É—â–∏–º –∫–ª—é—á–æ–º
            # –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            current_servers = []
            current_file = get_active_data_path()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if current_file and os.path.exists(current_file):
                try:
                    with open(current_file, 'rb') as f:
                        current_encrypted = f.read()
                    # decrypt_data –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –ø–æ—ç—Ç–æ–º—É –¥–µ–∫–æ–¥–∏—Ä—É–µ–º bytes –≤ —Å—Ç—Ä–æ–∫—É
                    current_decrypted = fernet.decrypt(current_encrypted).decode('utf-8')
                    current_servers = json.loads(current_decrypted)
                except Exception:
                    current_servers = []
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Å —Ç–µ–∫—É—â–∏–º –∫–ª—é—á–æ–º
            reencrypted_servers_data = []
            for server in servers_data:
                reencrypted_server = re_encrypt_service_data(server, fernet_external, fernet)
                reencrypted_servers_data.append(reencrypted_server)
            
            # –ó–∞–º–µ–Ω—è–µ–º servers_data –Ω–∞ –ø–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            servers_data = reencrypted_servers_data
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö IP –∞–¥—Ä–µ—Å–æ–≤ –∏ –∏–º–µ–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–µ–π
            existing_ips = {server.get('ip', '') for server in current_servers if server.get('ip')}
            existing_names = {server.get('name', '') for server in current_servers if server.get('name')}
            
            # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID —Å—Ä–µ–¥–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
            max_id = 0
            for server in current_servers:
                if 'id' in server and isinstance(server['id'], int):
                    max_id = max(max_id, server['id'])
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ ID
            new_servers = []
            skipped_count = 0
            for server in servers_data:
                server_ip = server.get('ip', '')
                server_name = server.get('name', '')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ IP –∏–ª–∏ –∏–º–µ–Ω–∏
                if server_ip in existing_ips or server_name in existing_names:
                    skipped_count += 1
                    continue
                
                # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                max_id += 1
                server['id'] = max_id
                new_servers.append(server)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥—É–±–ª–µ–π
                if server_ip:
                    existing_ips.add(server_ip)
                if server_name:
                    existing_names.add(server_name)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            combined_servers = current_servers + new_servers
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"ai_services_merged_{timestamp}.enc"
            
            app_data_dir = get_app_data_dir()
            data_dir = os.path.join(app_data_dir, "data")
            os.makedirs(data_dir, exist_ok=True)
            
            file_path = os.path.join(data_dir, filename)
            
            # –®–∏—Ñ—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—à–∏–º –∫–ª—é—á–æ–º
            json_string = json.dumps(combined_servers, ensure_ascii=False, indent=2)
            encrypted_with_our_key = fernet.encrypt(json_string.encode('utf-8'))
            with open(file_path, 'wb') as f:
                f.write(encrypted_with_our_key)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            app.config['active_data_file'] = file_path
            save_app_config()
            
            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            if new_servers:
                message = f'–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(new_servers)} –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤!'
                if skipped_count > 0:
                    message += f' –ü—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å–µ—Ä–≤–µ—Ä–æ–≤.'
                flash(message, 'success')
            else:
                flash('–í—Å–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.', 'info')
            
        except InvalidToken:
            flash('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞.', 'danger')
        except json.JSONDecodeError:
            flash('–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.', 'danger')
        except Exception as e:
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}', 'danger')
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_file_path):
                os.remove(temp_file_path)
                
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}', 'danger')
    
    return redirect(url_for('settings_page'))

@app.route('/data/detach', methods=['POST'])
def detach_data():
    """–û—Ç–∫—Ä–µ–ø–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö."""
    if app.config.get('active_data_file'):
        app.config['active_data_file'] = None
        save_app_config()
        flash('–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω.', 'info')
    
    return redirect(url_for('index'))


@app.route('/check_ip/<ip_address>')
def check_ip(ip_address):
    try:
        ip_check_url = app.config.get('service_urls', {}).get('ip_check_api', 'https://ipinfo.io/{ip}/json').format(ip=ip_address)
        response = requests.get(ip_check_url, timeout=5)
        if response.status_code == 200:
            return jsonify(response.json())
        else:
            return jsonify({"error": f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}"}), 500
    except requests.exceptions.RequestException as e:
        return jsonify({"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É: {e}"}), 500

@app.route('/settings')
@yubikey_auth.require_auth if yubikey_auth else (lambda f: f)
def change_main_key():
    """–°–º–µ–Ω–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ —Å –ø–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∫–æ–π –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö."""
    global SECRET_KEY, fernet  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    
    try:
        new_key = request.form.get('new_key', '').strip()
        confirm_key = request.form.get('confirm_key', '').strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç
        if new_key != confirm_key:
            flash('–û—à–∏–±–∫–∞: –∫–ª—é—á–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.', 'danger')
            return redirect(url_for('settings_page'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
        if not new_key:
            flash('–û—à–∏–±–∫–∞: –Ω–æ–≤—ã–π –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.', 'danger')
            return redirect(url_for('settings_page'))
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π –∫–ª—é—á –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–ª—è Fernet
            test_fernet = Fernet(new_key.encode())
        except Exception:
            flash('–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞. –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Fernet.', 'danger')
            return redirect(url_for('settings_page'))
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–ª—é—á–æ–º
        current_servers = load_ai_services()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_filename = f"backup_before_key_change_{timestamp}.enc"
        
        app_data_dir = get_app_data_dir()
        data_dir = os.path.join(app_data_dir, "data")
        backup_path = os.path.join(data_dir, backup_filename)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        if app.config.get('active_data_file') and os.path.exists(app.config['active_data_file']):
            shutil.copy2(app.config['active_data_file'], backup_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        old_key = os.environ.get('SECRET_KEY')
        old_secret_key = SECRET_KEY
        old_fernet = fernet
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ['SECRET_KEY'] = new_key
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª .env –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        is_frozen = getattr(sys, 'frozen', False)
        if is_frozen:
            # –í —É–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º .env –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            app_data_dir = get_app_data_dir()
            env_file = os.path.join(app_data_dir, '.env')
        else:
            # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
                env_file = '.env'
        
        env_lines = []
        
        if os.path.exists(env_file):
            with open(env_file, 'r') as f:
                env_lines = f.readlines()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º SECRET_KEY
        key_updated = False
        for i, line in enumerate(env_lines):
            if line.startswith('SECRET_KEY='):
                env_lines[i] = f'SECRET_KEY={new_key}\n'
                key_updated = True
                break
        
        if not key_updated:
            env_lines.append(f'SECRET_KEY={new_key}\n')
        
        try:
            with open(env_file, 'w') as f:
                f.writelines(env_lines)
        except PermissionError:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª, –ø–æ–ø—Ä–æ–±—É–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            app_data_dir = get_app_data_dir()
            fallback_env_file = os.path.join(app_data_dir, '.env')
            with open(fallback_env_file, 'w') as f:
                f.writelines(env_lines)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º
        new_filename = f"ai_services_reencrypted_{timestamp}.enc"
        new_file_path = os.path.join(data_dir, new_filename)
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –°–ù–ê–ß–ê–õ–ê
            SECRET_KEY = new_key
            fernet = Fernet(new_key.encode())
            
            # –ü–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º
            with open(new_file_path, 'wb') as f:
                f.write(encrypt_data(json.dumps(current_servers)).encode())
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            app.config['active_data_file'] = new_file_path
            save_app_config()
            
            flash(f'‚úÖ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {new_filename}. –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫: {backup_filename}', 'success')
            
        except Exception as e:
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –í–°–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            os.environ['SECRET_KEY'] = old_key
            SECRET_KEY = old_secret_key
            fernet = old_fernet
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π .env —Ñ–∞–π–ª
            old_env_lines = []
            for line in env_lines:
                if line.startswith('SECRET_KEY='):
                    old_env_lines.append(f'SECRET_KEY={old_key}\n')
                else:
                    old_env_lines.append(line)
            
            try:
                with open(env_file, 'w') as f:
                    f.writelines(old_env_lines)
            except PermissionError:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª, –ø–æ–ø—Ä–æ–±—É–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                app_data_dir = get_app_data_dir()
                fallback_env_file = os.path.join(app_data_dir, '.env')
                with open(fallback_env_file, 'w') as f:
                    f.writelines(old_env_lines)
            
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}. –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.', 'danger')
            
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–ª—é—á–∞: {str(e)}', 'danger')
    
    return redirect(url_for('settings_page'))

@app.route('/settings')
@yubikey_auth.require_auth if yubikey_auth else (lambda f: f)
def verify_key_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –∏ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞."""
    try:
        uploaded_file = request.files.get('verify_file')
        test_key = request.form.get('verify_key', '').strip()
        
        if not uploaded_file or not test_key:
            flash('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –∏ —É–∫–∞–∑–∞—Ç—å –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.', 'danger')
            return redirect(url_for('settings_page'))
        
        if not uploaded_file.filename.endswith('.enc'):
            flash('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª .enc', 'danger')
            return redirect(url_for('settings_page'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
        try:
            test_fernet = Fernet(test_key.encode())
        except Exception:
            flash('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞ Fernet.', 'danger')
            return redirect(url_for('settings_page'))
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        file_content = uploaded_file.read()
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å
            decrypted_data = test_fernet.decrypt(file_content).decode()
            data = json.loads(decrypted_data)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            if isinstance(data, list):
                server_count = len(data)
                
                # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö
                providers = set()
                server_names = []
                
                for server in data:
                    if isinstance(server, dict):
                        if 'provider' in server:
                            providers.add(server['provider'])
                        if 'name' in server:
                            server_names.append(server['name'])
                
                provider_list = ', '.join(sorted(providers)) if providers else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                name_preview = ', '.join(server_names[:3])
                if len(server_names) > 3:
                    name_preview += f' –∏ –µ—â–µ {len(server_names) - 3}'
                
                flash(f'‚úÖ –ö–ª—é—á –ø–æ–¥—Ö–æ–¥–∏—Ç! –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {server_count}. –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {provider_list}. –°–µ—Ä–≤–µ—Ä—ã: {name_preview}', 'success')
            else:
                flash('‚úÖ –ö–ª—é—á –ø–æ–¥—Ö–æ–¥–∏—Ç, –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è.', 'warning')
                
        except InvalidToken:
            flash('‚ùå –ö–ª—é—á –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ —ç—Ç–æ–º—É —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö.', 'danger')
        except json.JSONDecodeError:
            flash('‚ùå –§–∞–π–ª —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ JSON –¥–∞–Ω–Ω—ã–µ.', 'danger')
        except Exception as e:
            flash(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}', 'danger')
            
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}', 'danger')
    
    return redirect(url_for('settings_page'))

@app.route('/settings')
@yubikey_auth.require_auth if yubikey_auth else (lambda f: f)
def generate_new_key():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª—é—á–∞ Fernet."""
    try:
        new_key = Fernet.generate_key().decode()
        return jsonify({'success': True, 'key': new_key})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/shutdown')
def shutdown():
    os.kill(os.getpid(), signal.SIGINT)
    return '–°–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...'

@app.route('/clipboard', methods=['POST'])
def set_clipboard():
    try:
        payload = request.get_json(silent=True) or {}
        text = payload.get('text', '')
        if sys.platform == 'darwin':
            try:
                pbcopy_path = '/usr/bin/pbcopy'
                args = [pbcopy_path] if os.path.exists(pbcopy_path) else ['pbcopy']
                proc = subprocess.Popen(args, stdin=subprocess.PIPE)
                proc.communicate(input=(text or '').encode('utf-8'))
                if proc.returncode == 0:
                    return jsonify({'success': True})
                osa_script = f'set the clipboard to {json.dumps(text or "")}'
                rc = subprocess.call(['/usr/bin/osascript', '-e', osa_script])
                return jsonify({'success': rc == 0})
            except Exception:
                try:
                    osa_script = f'set the clipboard to {json.dumps(text or "")}'
                    rc = subprocess.call(['/usr/bin/osascript', '-e', osa_script])
                    return jsonify({'success': rc == 0})
                except Exception as e2:
                    return jsonify({'success': False, 'error': str(e2)}), 500
        else:
            try:
                import pyperclip
                pyperclip.copy(text or '')
                return jsonify({'success': True})
            except Exception as e:
                return jsonify({'success': False, 'error': str(e)}), 500
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

def _is_port_free(port: int) -> bool:
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        try:
            s.bind(('127.0.0.1', port))
            return True
        except OSError:
            return False

# --- –ù–∞–¥—ë–∂–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω–æ–º –ø–æ—Ä—Ç–µ (–±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤) ---
SERVER_PORT = None
_WSGI_SERVER = None


def _start_flask_server():
    global SERVER_PORT, _WSGI_SERVER
    try:
        _WSGI_SERVER = make_server('127.0.0.1', 0, app)
        SERVER_PORT = _WSGI_SERVER.server_port
        print(f"üöÄ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:{SERVER_PORT}")
        _WSGI_SERVER.serve_forever()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Flask —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()

def create_default_schema():
    """
    –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ö–µ–º—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    """
    default_schema = {
        "service_types": [
            "AI Development Tool", 
            "AI Writing Assistant", 
            "AI Image Generator", 
            "AI Video Generator", 
            "Media Platform", 
            "Professional Network", 
            "Cloud Service", 
            "Productivity Tool"
        ],
        "supported_currencies": ["USD", "EUR", "RUB", "GBP"],
        "billing_cycles": ["weekly", "monthly", "quarterly", "yearly"],
        "status_options": ["active", "inactive", "trial", "expired", "cancelled"]
    }
    
    try:
        with open('ai_services_schema.json', 'w', encoding='utf-8') as f:
            json.dump(default_schema, f, indent=2, ensure_ascii=False)
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –í—ã–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
create_default_schema()

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Ç–µ—Å—Ç—ã –¥–ª—è Jinja2
def regex_replace(s, find, replace):
    """A non-optimal implementation of a regex replace."""
    return re.sub(find, replace, s)

def regex_search(pattern, string):
    """Check if the pattern matches the string."""
    return re.search(pattern, string) is not None

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Ç–µ—Å—Ç–æ–≤
app.jinja_env.filters['regex_replace'] = regex_replace
app.jinja_env.tests['regex_search'] = regex_search

@app.route('/yubikey/login', methods=['GET', 'POST'])
def yubikey_login():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ YubiKey —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        print(f"üîç yubikey_login: method={request.method}, yubikey_auth={yubikey_auth is not None}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —à–∞–±–ª–æ–Ω
        is_online = check_internet_connection()
        
        # –ï—Å–ª–∏ YubiKey –≤–∫–ª—é—á–µ–Ω, –Ω–æ –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        try:
            if yubikey_auth and yubikey_auth.enabled and len(yubikey_auth.get_keys()) == 0:
                from flask import flash
                flash('YubiKey –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –£–∫–∞–∂–∏—Ç–µ Client ID –∏ Secret Key –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª.', 'warning')
                return redirect(url_for('settings_page'))
        except Exception:
            pass
        
        if request.method == 'POST':
            otp = request.form.get('otp', '').strip()
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ OTP: {otp[:10]}... (–¥–ª–∏–Ω–∞: {len(otp)})")
            
            if not otp:
                print("‚ö†Ô∏è OTP –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
                flash('–í–≤–µ–¥–∏—Ç–µ OTP –æ—Ç YubiKey', 'danger')
                return render_template('yubikey_login.html', is_online=is_online)
                
            try:
                if yubikey_auth:
                    success, message = yubikey_auth.verify_otp(otp)
                    if success:
                        session['yubikey_authenticated'] = True
                        print("‚úÖ YubiKey –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                        flash('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è YubiKey —É—Å–ø–µ—à–Ω–∞!', 'success')
                        return redirect(url_for('index'))
                    else:
                        print(f"‚ùå YubiKey –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ—É—Å–ø–µ—à–Ω–∞: {message}")
                        flash(f'–ù–µ–≤–µ—Ä–Ω—ã–π OTP: {message}', 'danger')
                else:
                    print("‚ùå YubiKey –º–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    flash('YubiKey –º–æ–¥—É–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω', 'danger')
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ OTP: {e}")
                import traceback
                traceback.print_exc()
                flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ OTP: {e}', 'error')
        
        print("‚úÖ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞ YubiKey")
        return render_template('yubikey_login.html', is_online=is_online)
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ yubikey_login: {e}")
        import traceback
        traceback.print_exc()
        flash('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞', 'error')
        return render_template('yubikey_login.html', is_online=check_internet_connection())

@app.route('/yubikey/logout')
def yubikey_logout():
    session.pop('yubikey_authenticated', None)
    flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'info')
    return redirect(url_for('yubikey_login'))

@app.route('/yubikey/setup', methods=['GET', 'POST'])
def yubikey_setup():
    if not yubikey_auth:
        flash('YubiKey –º–æ–¥—É–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω', 'danger')
        return redirect(url_for('index'))
        
    if request.method == 'POST':
        client_id = request.form.get('client_id', '').strip()
        secret_key = request.form.get('secret_key', '').strip()
        key_name = request.form.get('key_name', '').strip()
        
        if not client_id or not secret_key:
            flash('–í–≤–µ–¥–∏—Ç–µ Client ID –∏ Secret Key', 'danger')
        else:
            if yubikey_auth.add_key(client_id, secret_key, key_name):
                flash('YubiKey —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', 'success')
            else:
                flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞', 'danger')
    
    # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    keys = yubikey_auth.get_keys() if yubikey_auth else []
    return render_template('yubikey_setup.html', yubikey_auth=yubikey_auth, keys=keys)

@app.route('/yubikey/remove/<int:key_index>', methods=['POST'])
def yubikey_remove_key(key_index):
    if yubikey_auth:
        removed_key = yubikey_auth.remove_key(key_index)
        if removed_key:
            flash(f'–ö–ª—é—á "{removed_key["name"]}" —É–¥–∞–ª–µ–Ω', 'success')
        else:
            flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞', 'danger')
    return redirect(url_for('yubikey_setup'))

@app.route('/yubikey/instructions')
def yubikey_instructions():
    return render_template('yubikey_instructions.html')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PIN —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: env -> config.json -> '1234'
def get_developer_pin() -> str:
    try:
        env_pin = os.getenv('DEV_PIN') or os.getenv('DEVELOPER_PIN')
        if env_pin and str(env_pin).strip():
            return str(env_pin).strip()
        cfg_pin = (app.config.get('security', {}) or {}).get('dev_pin') if isinstance(app.config.get('security'), dict) else None
        if cfg_pin and str(cfg_pin).strip():
            return str(cfg_pin).strip()
    except Exception:
        pass
    return '1234'

@app.route('/dev_login', methods=['POST'])
def dev_login():
    """–°–∫—Ä—ã—Ç—ã–π –≤—Ö–æ–¥ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ PIN (–¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ –∏–º–µ–Ω–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞).
    –ü—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º PIN —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç yubikey_authenticated=True –≤ —Å–µ—Å—Å–∏–∏.
    –ò—Å—Ç–æ—á–Ω–∏–∫ PIN: ENV (DEV_PIN/DEVELOPER_PIN) -> config.json (security.dev_pin) -> '1234'
    """
    try:
        payload = request.get_json(silent=True) or {}
        pin = payload.get('pin') or request.form.get('pin')
        expected = get_developer_pin()
        if str(pin).strip() == expected:
            session['yubikey_authenticated'] = True
            try:
                log_security_event("DEV_LOGIN", "Developer PIN accepted", request.remote_addr)
            except Exception:
                pass
            return jsonify({'success': True})
        else:
            try:
                log_security_event("DEV_LOGIN_FAIL", "Invalid developer PIN", request.remote_addr)
            except Exception:
                pass
            return jsonify({'success': False}), 401
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/secret/login', methods=['POST'])
def secret_login():
    try:
        if not yubikey_auth:
            return jsonify({'success': False, 'message': 'YubiKey –º–æ–¥—É–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω'}), 400
        if yubikey_auth.is_secret_login_blocked():
            remaining = yubikey_auth.get_secret_login_block_remaining()
            return jsonify({'success': False, 'message': f'–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ {remaining} —Å–µ–∫', 'blocked': True, 'remaining_seconds': remaining}), 429
        pin = request.form.get('pin', '').strip()
        if not pin:
            return jsonify({'success': False, 'message': '–í–≤–µ–¥–∏—Ç–µ PIN'}), 400
        success, message = yubikey_auth.secret_authenticate(pin)
        if success:
            session['yubikey_authenticated'] = True
        status = 200 if success else 400
        return jsonify({'success': success, 'message': message}), status
    except Exception as e:
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞: {e}'}), 500

@app.route('/secret/change_pin', methods=['POST'])
def change_secret_pin():
    try:
        if not yubikey_auth:
            return jsonify({'success': False, 'message': 'YubiKey –º–æ–¥—É–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω'}), 400
        old_pin = request.form.get('old_pin', '').strip()
        new1 = request.form.get('new_pin1', '').strip()
        new2 = request.form.get('new_pin2', '').strip()
        if new1 != new2:
            return jsonify({'success': False, 'message': '–ù–æ–≤—ã–µ PIN-–∫–æ–¥—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'})
        if not new1 or len(new1) < 4:
            return jsonify({'success': False, 'message': 'PIN >= 4 —Å–∏–º–≤–æ–ª–æ–≤'})
        success, message = yubikey_auth.change_secret_pin(old_pin, new1)
        return jsonify({'success': success, 'message': message})
    except Exception as e:
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞: {e}'}), 500

if __name__ == "__main__":
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        print("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
        migrate_data()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        print("üîÑ –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ...")
        flask_thread = threading.Thread(target=_start_flask_server)
        flask_thread.daemon = True
        flask_thread.start()
        
        # –ñ–¥—ë–º, –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è –∏ –∑–∞–¥–∞—Å—Ç –ø–æ—Ä—Ç
        for _ in range(100):
            if SERVER_PORT:
                break
            time.sleep(0.05)

        def on_closing():
            print("–û–∫–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ...")
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
                requests.get(f'http://127.0.0.1:{SERVER_PORT}/shutdown', timeout=1)
            except requests.exceptions.RequestException:
                # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Å–µ—Ä–≤–µ—Ä —É–º—Ä–µ—Ç –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                pass

        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ PyWebView
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ GUI –æ–∫–Ω–∞...")
        window = webview.create_window(
            'AllManagerC',
            f'http://127.0.0.1:{SERVER_PORT or 5050}',
            width=1280,
            height=800,
            resizable=True
        )
        window.events.closing += on_closing

        # –ó–∞–ø—É—Å–∫–∞–µ–º GUI
        print("üöÄ –ó–∞–ø—É—Å–∫ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        webview.start(debug=False) # debug=True –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å –æ—Ç–ª–∞–¥–∫–æ–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫

        # –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ PyWebView, –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –∑–¥–µ—Å—å.
        print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")