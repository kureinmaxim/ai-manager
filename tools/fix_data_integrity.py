#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ AI Manager
"""

import os
import json
import base64
from cryptography.fernet import Fernet
from pathlib import Path

def load_secret_key():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç SECRET_KEY –∏–∑ .env —Ñ–∞–π–ª–∞"""
    try:
        with open('.env', 'r') as f:
            for line in f:
                if line.startswith('SECRET_KEY='):
                    return line.split('=', 1)[1].strip()
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    return None

def test_decryption(file_path, secret_key):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'rb') as f:
            encrypted_data = f.read()
        
        if not encrypted_data:
            return False, "–§–∞–π–ª –ø—É—Å—Ç–æ–π"
            
        fernet = Fernet(secret_key.encode())
        decrypted_data = fernet.decrypt(encrypted_data)
        data = json.loads(decrypted_data.decode('utf-8'))
        
        return True, f"–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {len(data)} —Å–µ—Ä–≤–∏—Å–æ–≤"
    except Exception as e:
        return False, str(e)

def analyze_data_files():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–û–í –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    secret_key = load_secret_key()
    if not secret_key:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å SECRET_KEY")
        return
    
    data_dir = Path("data")
    if not data_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ .enc —Ñ–∞–π–ª—ã
    enc_files = list(data_dir.glob("*.enc"))
    
    print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(enc_files)}")
    print()
    
    working_files = []
    
    for file_path in enc_files:
        print(f"üìÅ {file_path.name}:")
        print(f"   –†–∞–∑–º–µ—Ä: {file_path.stat().st_size} –±–∞–π—Ç")
        
        success, message = test_decryption(file_path, secret_key)
        if success:
            print(f"   ‚úÖ {message}")
            working_files.append(file_path)
        else:
            print(f"   ‚ùå {message}")
        print()
    
    return working_files

def fix_active_file(working_files):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("=" * 50)
    
    if not working_files:
        print("‚ùå –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª –∫–∞–∫ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π
    best_file = max(working_files, key=lambda f: f.stat().st_size)
    print(f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {best_file.name}")
    print(f"–†–∞–∑–º–µ—Ä: {best_file.stat().st_size} –±–∞–π—Ç")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_path = Path("config.json")
    if not config_path.exists():
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Ñ–∞–π–ª—É
        config['active_data_file'] = str(best_file.absolute())
        
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {best_file.name}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def verify_fix():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    print("‚úÖ –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        import sys
        sys.path.append('.')
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_code = """
import os
import json
from cryptography.fernet import Fernet

def test_load():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('config.json', 'r') as f:
        config = json.load(f)
    
    active_file = config.get('active_data_file')
    if not active_file or not os.path.exists(active_file):
        return False, "–ê–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á
    with open('.env', 'r') as f:
        for line in f:
            if line.startswith('SECRET_KEY='):
                secret_key = line.split('=', 1)[1].strip()
                break
    else:
        return False, "SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
    try:
        with open(active_file, 'rb') as f:
            encrypted_data = f.read()
        
        fernet = Fernet(secret_key.encode())
        decrypted_data = fernet.decrypt(encrypted_data)
        data = json.loads(decrypted_data.decode('utf-8'))
        
        return True, f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Å–µ—Ä–≤–∏—Å–æ–≤"
    except Exception as e:
        return False, str(e)

success, message = test_load()
print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {message}")
"""
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
        result = os.popen(f'python3 -c "{test_code}"').read().strip()
        print(result)
        
        if "–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ" in result:
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print("‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ AI MANAGER - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    working_files = analyze_data_files()
    
    if not working_files:
        print("‚ùå –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        return
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if fix_active_file(working_files):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if verify_fix():
            print("\nüéâ –ü–†–û–ë–õ–ï–ú–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
            print("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:")
            print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python3 run_app.py")
            print("2. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —Å–µ—Ä–≤–∏—Å—ã")
            print("3. –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã")
        else:
            print("\n‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É")

if __name__ == "__main__":
    main() 