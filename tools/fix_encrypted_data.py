#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –∫–ª—é—á–µ–π.
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º,
–Ω–æ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã —Å—Ç–∞—Ä—ã–º –∫–ª—é—á–æ–º.
"""

import os
import json
import sys
from cryptography.fernet import Fernet
from datetime import datetime

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        return {}

def load_key_from_env():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–ª—é—á –∏–∑ .env —Ñ–∞–π–ª–∞."""
    try:
        with open('.env', 'r') as f:
            for line in f:
                if line.startswith('SECRET_KEY='):
                    return line.strip().split('=', 1)[1]
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–∞: {e}")
        return None

def re_encrypt_service_data(service, old_fernet, new_fernet):
    """–ü–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è —Å–µ—Ä–≤–∏—Å–∞."""
    import copy
    service_copy = copy.deepcopy(service)
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∫–∏
    fields_to_reencrypt = [
        ('credentials', 'username'),
        ('credentials', 'password'),
        ('credentials', 'additional_info'),
        ('personal_cabinet', 'account_email'),
        ('ssh_credentials', 'password'),
        ('ssh_credentials', 'root_password'),
        ('panel_credentials', 'user'),
        ('panel_credentials', 'password'),
        ('hoster_credentials', 'user'),
        ('hoster_credentials', 'password')
    ]
    
    fields_processed = 0
    fields_reencrypted = 0
    
    for section, field in fields_to_reencrypt:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ–∫—Ü–∏—è –∏ –ø–æ–ª–µ
            if section in service_copy and field in service_copy[section]:
                encrypted_value = service_copy[section][field]
                fields_processed += 1
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if not encrypted_value or encrypted_value == "":
                    continue
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º
                try:
                    decrypted_value = new_fernet.decrypt(encrypted_value.encode()).decode()
                    # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å, –ø–æ–ª–µ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ
                    continue
                except:
                    pass
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–º –∫–ª—é—á–æ–º
                try:
                    decrypted_value = old_fernet.decrypt(encrypted_value.encode()).decode()
                    # –ó–∞—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º
                    reencrypted_value = new_fernet.encrypt(decrypted_value.encode()).decode()
                    service_copy[section][field] = reencrypted_value
                    fields_reencrypted += 1
                    print(f"  ‚úÖ –ü–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {section}.{field}")
                except Exception as e:
                    print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å {section}.{field}: {e}")
                    continue
                    
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å —Å–µ–∫—Ü–∏–µ–π {section}: {e}")
            continue
    
    return service_copy, fields_processed, fields_reencrypted

def fix_data_file(old_key, new_key, data_file_path):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö, –ø–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—è –ø–æ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º."""
    
    print(f"\n=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –§–ê–ô–õ–ê –î–ê–ù–ù–´–• ===")
    print(f"–§–∞–π–ª: {data_file_path}")
    print(f"–°—Ç–∞—Ä—ã–π –∫–ª—é—á (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–º–≤–æ–ª–æ–≤): {old_key[-10:]}")
    print(f"–ù–æ–≤—ã–π –∫–ª—é—á (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–º–≤–æ–ª–æ–≤): {new_key[-10:]}")
    
    # –°–æ–∑–¥–∞–µ–º Fernet –æ–±—ä–µ–∫—Ç—ã
    old_fernet = Fernet(old_key.encode())
    new_fernet = Fernet(new_key.encode())
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = f"{data_file_path}.backup_{timestamp}"
    
    try:
        import shutil
        shutil.copy2(data_file_path, backup_path)
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏? (y/N): ")
        if response.lower() != 'y':
            print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return False
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ (—Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º)
        with open(data_file_path, 'rb') as f:
            encrypted_data = f.read()
        
        decrypted_data = new_fernet.decrypt(encrypted_data)
        services_data = json.loads(decrypted_data.decode('utf-8'))
        
        print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {len(services_data)} —Å–µ—Ä–≤–∏—Å–æ–≤")
        
        # –ü–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å
        fixed_services = []
        total_fields = 0
        total_reencrypted = 0
        
        for i, service in enumerate(services_data):
            service_name = service.get('name', f'Service #{i+1}')
            print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {service_name}")
            
            fixed_service, fields_processed, fields_reencrypted = re_encrypt_service_data(
                service, old_fernet, new_fernet
            )
            
            fixed_services.append(fixed_service)
            total_fields += fields_processed
            total_reencrypted += fields_reencrypted
            
            print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª–µ–π: {fields_processed}, –ø–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {fields_reencrypted}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        json_string = json.dumps(fixed_services, ensure_ascii=False, indent=2)
        encrypted_data = new_fernet.encrypt(json_string.encode('utf-8'))
        
        with open(data_file_path, 'wb') as f:
            f.write(encrypted_data)
        
        print(f"\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–ª–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_fields}")
        print(f"‚úÖ –ü–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ –ø–æ–ª–µ–π: {total_reencrypted}")
        print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {data_file_path}")
        
        if total_reencrypted > 0:
            print(f"\nüîë –¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–æ–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã —Ç–µ–∫—É—â–∏–º –∫–ª—é—á–æ–º!")
        else:
            print(f"\n‚ú® –í—Å–µ –ø–æ–ª—è —É–∂–µ –±—ã–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã.")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ò: {e}")
        import traceback
        traceback.print_exc()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        if os.path.exists(backup_path):
            try:
                shutil.copy2(backup_path, data_file_path)
                print(f"üîÑ –§–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
            except Exception as restore_error:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {restore_error}")
        
        return False

def main():
    print("üîß –£—Ç–∏–ª–∏—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    data_file_path = config.get('active_data_file')
    
    if not data_file_path or not os.path.exists(data_file_path):
        print("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return 1
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—é—á
    current_key = load_key_from_env()
    if not current_key:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ")
        return 1
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª: {data_file_path}")
    print(f"‚úÖ –¢–µ–∫—É—â–∏–π –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á
    print(f"\n–î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω—É–∂–µ–Ω –°–¢–ê–†–´–ô –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")
    print(f"(—Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–º –±—ã–ª–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –ø–æ–ª—è –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ä–≤–∏—Å–æ–≤)")
    old_key = input("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –∫–ª—é—á: ").strip()
    
    if not old_key:
        print("‚ùå –°—Ç–∞—Ä—ã–π –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω")
        return 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–µ–π
    try:
        Fernet(old_key.encode())
        Fernet(current_key.encode())
    except Exception as e:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞: {e}")
        return 1
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    success = fix_data_file(old_key, current_key, data_file_path)
    
    if success:
        print(f"\n‚úÖ –ì–û–¢–û–í–û! –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª—è—Ç—å —Å–µ—Ä–≤–∏—Å—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.")
        return 0
    else:
        print(f"\n‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 