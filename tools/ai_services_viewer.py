#!/usr/bin/env python3
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ AI-—Å–µ—Ä–≤–∏—Å–æ–≤
"""
import os
import json
from cryptography.fernet import Fernet
from dotenv import load_dotenv

def decrypt_data(fernet_instance, encrypted_data):
    """–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    if not encrypted_data:
        return "N/A"
    try:
        if isinstance(encrypted_data, str):
            encrypted_data = encrypted_data.encode()
        return fernet_instance.decrypt(encrypted_data).decode('utf-8')
    except Exception:
        return "–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏"

def view_ai_services():
    """–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç AI-—Å–µ—Ä–≤–∏—Å—ã"""
    load_dotenv()
    secret_key = os.getenv("SECRET_KEY")
    
    if not secret_key:
        print("‚ùå SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return
        
    try:
        fernet = Fernet(secret_key.encode())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Fernet: {e}")
        return
    
    data_file = "data/ai_services.json.enc"
    if not os.path.exists(data_file):
        print(f"‚ùå –§–∞–π–ª {data_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        with open(data_file, 'rb') as f:
            encrypted_data = f.read()
            
        decrypted_json = fernet.decrypt(encrypted_data).decode('utf-8')
        services = json.loads(decrypted_json)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {e}")
        return
    
    print("ü§ñ === AI SERVICES MANAGER - –î–ê–ù–ù–´–ï ===")
    print(f"üìä –í—Å–µ–≥–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {len(services)}")
    print("=" * 50)
    
    for i, service in enumerate(services, 1):
        print(f"\nüî∏ –°–ï–†–í–ò–° #{i}: {service.get('name', 'N/A')}")
        print(f"   –¢–∏–ø: {service.get('service_type', 'N/A')}")
        print(f"   –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {service.get('provider', 'N/A')}")
        print(f"   –°—Ç–∞—Ç—É—Å: {service.get('status', 'N/A')}")
        
        # –î–æ—Å—Ç—É–ø
        print(f"\n   üîó –î–æ—Å—Ç—É–ø:")
        print(f"   URL –≤—Ö–æ–¥–∞: {service.get('login_url', 'N/A')}")
        
        creds = service.get('credentials', {})
        if creds:
            username = decrypt_data(fernet, creds.get('username', ''))
            password = decrypt_data(fernet, creds.get('password', ''))
            print(f"   –õ–æ–≥–∏–Ω: {username}")
            print(f"   –ü–∞—Ä–æ–ª—å: {password}")
        
        # –ü–æ–¥–ø–∏—Å–∫–∞
        sub = service.get('subscription', {})
        if sub:
            print(f"\n   üí≥ –ü–æ–¥–ø–∏—Å–∫–∞:")
            print(f"   –ü–ª–∞–Ω: {sub.get('plan_name', 'N/A')}")
            print(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: {sub.get('cost_monthly', 0)} {sub.get('currency', 'USD')}/–º–µ—Å")
            print(f"   –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: {sub.get('next_payment_date', 'N/A')}")
            print(f"   –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {'–î–∞' if sub.get('auto_renewal') else '–ù–µ—Ç'}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
        notes = service.get('notes', '')
        if notes:
            print(f"\n   üìù –ó–∞–º–µ—Ç–∫–∏: {notes}")
            
        print(f"   üìÖ –°–æ–∑–¥–∞–Ω: {service.get('created_at', 'N/A')}")
        print("-" * 40)
    
    print("\n‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    view_ai_services()
