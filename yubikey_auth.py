import json
from pathlib import Path
from flask import session, redirect, url_for, flash, request
from yubico_client import Yubico
from yubico_client.yubico_exceptions import YubicoError, InvalidClientIdError, SignatureVerificationError
from datetime import datetime
import socket
import re

def check_internet_connection(host="api.yubico.com", port=443, timeout=3):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø—ã—Ç–∞—è—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ö–æ—Å—Ç—É Yubico."""
    try:
        socket.setdefaulttimeout(timeout)
        socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((host, port))
        return True
    except (socket.error, socket.timeout) as ex:
        print(f"üîå –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {ex}")
        return False

class YubiKeyAuth:
    def __init__(self, app_data_dir, static_passwords=None):
        self.config_file = Path(app_data_dir) / 'yubikey_config.json'
        self.keys = []  # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ
        self.enabled = False
        self.static_passwords = static_passwords or []
        # –°–µ–∫—Ä–µ—Ç–Ω—ã–π PIN –∏ –∞–Ω—Ç–∏–±—Ä—É—Ç-–ª–æ–≥–∏–∫–∞ (–≤ —Ñ–∞–π–ª–µ config.json –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
        self.app_data_dir = Path(app_data_dir)
        self.app_config_path = self.app_data_dir / 'config.json'
        self.secret_login_attempts = 0
        self.secret_login_blocked_until = 0
        self.secret_login_block_duration = 30  # —Å–µ–∫—É–Ω–¥

        self.load_config()
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é YubiKey —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        try:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.config_file.parent.mkdir(parents=True, exist_ok=True)
            
            if self.config_file.exists():
                try:
                    with open(self.config_file, 'r', encoding='utf-8') as f:
                        config = json.load(f)
                        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–æ–¥–∏–Ω –∫–ª—é—á)
                        if 'client_id' in config and 'secret_key' in config:
                            self.keys = [{
                                'client_id': config.get('client_id'),
                                'secret_key': config.get('secret_key'),
                                'name': '–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á',
                                'created_at': config.get('created_at', '2024-01-01')
                            }]
                        else:
                            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π)
                            self.keys = config.get('keys', [])
                        self.enabled = config.get('enabled', False)
                        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è YubiKey –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(self.keys)} –∫–ª—é—á–µ–π")
                except json.JSONDecodeError as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ {self.config_file}: {e}")
                    self.keys = []
                    self.enabled = False
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {self.config_file}: {e}")
                    self.keys = []
                    self.enabled = False
            else:
                print(f"üìÑ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ YubiKey –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.config_file}")
                self.keys = []
                self.enabled = False
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YubiKey: {e}")
            self.keys = []
            self.enabled = False
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é YubiKey —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        try:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.config_file.parent.mkdir(parents=True, exist_ok=True)
            
            config = {
                'keys': self.keys,
                'enabled': self.enabled
            }
            
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è YubiKey —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {len(self.keys)} –∫–ª—é—á–µ–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è YubiKey: {e}")
            raise
    
    def add_key(self, client_id, secret_key, name=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π YubiKey."""
        if not name:
            name = f"–ö–ª—é—á {len(self.keys) + 1}"
        
        new_key = {
            'client_id': client_id,
            'secret_key': secret_key,
            'name': name,
            'created_at': datetime.now().isoformat()
        }
        
        self.keys.append(new_key)
        self.enabled = True
        self.save_config()
        return True
    
    def remove_key(self, key_index):
        """–£–¥–∞–ª—è–µ—Ç YubiKey –ø–æ –∏–Ω–¥–µ–∫—Å—É."""
        if 0 <= key_index < len(self.keys):
            removed_key = self.keys.pop(key_index)
            if not self.keys:
                self.enabled = False
            self.save_config()
            return removed_key
        return None
    
    def get_keys(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π."""
        return self.keys

    # ====== –°–ï–ö–†–ï–¢–ù–´–ô PIN: —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∞–Ω—Ç–∏–±—Ä—É—Ç ======
    def _load_app_config(self):
        try:
            if not self.app_config_path.exists():
                return {}
            with open(self.app_config_path, 'r', encoding='utf-8') as f:
                return json.load(f) or {}
        except Exception:
            return {}

    def _save_app_config(self, cfg: dict):
        try:
            self.app_config_path.parent.mkdir(parents=True, exist_ok=True)
            with open(self.app_config_path, 'w', encoding='utf-8') as f:
                json.dump(cfg, f, indent=2, ensure_ascii=False)
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è config.json: {e}")
            return False

    def get_secret_pin(self) -> str:
        try:
            import os
            env_pin = os.getenv('DEV_PIN') or os.getenv('DEVELOPER_PIN')
            if env_pin and str(env_pin).strip():
                return str(env_pin).strip()
        except Exception:
            pass
        cfg = self._load_app_config()
        sec = cfg.get('security') or {}
        pin = sec.get('secret_pin', {}).get('current_pin') if isinstance(sec.get('secret_pin'), dict) else None
        if not pin:
            # fallback –Ω–∞ security.dev_pin –∏–ª–∏ '1234'
            pin = sec.get('dev_pin') or '1234'
        return str(pin)

    def change_secret_pin(self, old_pin: str, new_pin: str):
        try:
            current = self.get_secret_pin()
            if str(old_pin) != str(current):
                return False, '–°—Ç–∞—Ä—ã–π PIN –Ω–µ–≤–µ—Ä–µ–Ω'
            cfg = self._load_app_config()
            if 'security' not in cfg or not isinstance(cfg.get('security'), dict):
                cfg['security'] = {}
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            cfg['security']['secret_pin'] = {
                'current_pin': str(new_pin),
                'updated_at': datetime.now().isoformat()
            }
            # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π dev_pin, —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞–ª
            if 'dev_pin' in cfg['security']:
                cfg['security'].pop('dev_pin', None)
            ok = self._save_app_config(cfg)
            if not ok:
                return False, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å PIN'
            # –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã
            self.secret_login_attempts = 0
            self.secret_login_blocked_until = 0
            return True, 'PIN –∏–∑–º–µ–Ω—ë–Ω'
        except Exception as e:
            return False, f'–û—à–∏–±–∫–∞: {e}'

    def is_secret_login_blocked(self) -> bool:
        try:
            import time
            return time.time() < float(self.secret_login_blocked_until or 0)
        except Exception:
            return False

    def get_secret_login_block_remaining(self) -> int:
        try:
            import time
            remaining = int((self.secret_login_blocked_until or 0) - time.time())
            return max(0, remaining)
        except Exception:
            return 0

    def block_secret_login(self):
        try:
            import time
            self.secret_login_blocked_until = time.time() + int(self.secret_login_block_duration)
        except Exception:
            pass

    def secret_authenticate(self, pin: str):
        try:
            if self.is_secret_login_blocked():
                return False, f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ {self.get_secret_login_block_remaining()} —Å–µ–∫"
            if not pin:
                return False, '–í–≤–µ–¥–∏—Ç–µ PIN'
            if str(pin).strip() == str(self.get_secret_pin()).strip():
                self.secret_login_attempts = 0
                session['yubikey_authenticated'] = True
                return True, '–£—Å–ø–µ—Ö'
            # –ù–µ–≤–µ—Ä–Ω—ã–π PIN
            self.secret_login_attempts += 1
            if self.secret_login_attempts >= 3:
                self.block_secret_login()
                self.secret_login_attempts = 0
                return False, '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞.'
            return False, '–ù–µ–≤–µ—Ä–Ω—ã–π PIN'
        except Exception as e:
            return False, f'–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}'

    
    def is_authenticated(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
            from flask import has_request_context
            if not has_request_context():
                print("‚ö†Ô∏è is_authenticated –≤—ã–∑–≤–∞–Ω –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞")
                return False
            
            return session.get('yubikey_authenticated', False)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ is_authenticated: {e}")
            return False
    
    def verify_otp(self, otp):
        """–ì–∏–±—Ä–∏–¥–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–æ–ª–∏, –ø–æ—Ç–æ–º –æ–Ω–ª–∞–π–Ω —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏."""
        if not otp:
            return False, "OTP –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–æ–ª–∏ (–≤—Å–µ–≥–¥–∞)
        if self.static_passwords and otp in self.static_passwords:
            print("‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω.")
            session['yubikey_authenticated'] = True
            session['offline_auth'] = True
            return True, "–û—Ñ–ª–∞–π–Ω-–ø–∞—Ä–æ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ –ø–æ–¥–æ—à–µ–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω-–∫–ª—é—á–∏
        if check_internet_connection():
            # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –æ–Ω–ª–∞–π–Ω-–∫–ª—é—á–∞ (YubiKey OTP): 44 —Å–∏–º–≤–æ–ª–∞ ModHex
            if not re.match(r'^[cbdefghijklnrtuv]{44}$', otp):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–Ω–ª–∞–π–Ω OTP –∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ñ–ª–∞–π–Ω-–ø–∞—Ä–æ–ª—å")
                return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–Ω–ª–∞–π–Ω OTP –∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ñ–ª–∞–π–Ω-–ø–∞—Ä–æ–ª—å"

            if not self.keys:
                return False, "–û–Ω–ª–∞–π–Ω-–∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"

            # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ Yubico –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            status_to_message = {
                'REPLAYED_OTP': "–ö–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑ (—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π).",
                'BAD_OTP': "–ù–µ–≤–µ—Ä–Ω—ã–π –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª—é—á–µ –µ—â—ë —Ä–∞–∑.",
                'NO_SUCH_CLIENT': "–ù–µ–≤–µ—Ä–Ω—ã–π Client ID. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —É–∫–∞–∑–∞–Ω —á–∏—Å–ª–æ–≤–æ–π Client ID –∏–∑ –∫–∞–±–∏–Ω–µ—Ç–∞ Yubico.",
                'BAD_SIGNATURE': "–ù–µ–≤–µ—Ä–Ω—ã–π Secret Key. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Secret Key, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–∑ –∫–∞–±–∏–Ω–µ—Ç–∞ Yubico.",
                'MISSING_PARAMETER': "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã Client ID –∏ Secret Key.",
                'BACKEND_ERROR': "–°–±–æ–π –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Yubico. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
                'REPLAYED_REQUEST': "–ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                'NOT_ENOUGH_ANSWERS': "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ Yubico. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
                'OPERATION_NOT_ALLOWED': "OTP-–æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª—é—á–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–ª–æ—Ç–∞ OTP."
            }

            for key_data in self.keys:
                try:
                    client_id = key_data.get('client_id')
                    secret_key = key_data.get('secret_key')
                    if not client_id or not secret_key:
                        continue

                    client = Yubico(client_id, secret_key)

                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç YubiCloud
                    response = client.verify(otp, return_response=True)
                    status = getattr(response, 'status', None) if response is not None else None

                    if status == 'OK':
                        print(f"‚úÖ –û–Ω–ª–∞–π–Ω OTP —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∫–ª—é—á–æ–º: {key_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}")
                        session['yubikey_authenticated'] = True
                        return True, "–û–Ω–ª–∞–π–Ω-–ø–∞—Ä–æ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"

                    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ OK ‚Äî –≤–µ—Ä–Ω—ë–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if status:
                        human_message = status_to_message.get(status, f"–û—à–∏–±–∫–∞ Yubico: {status}")
                        print(f"‚ö†Ô∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ ({status}): {human_message}")
                        return False, human_message

                    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ—É—Å–ø–µ—Ö –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞
                    print("‚ö†Ô∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –±–µ–∑ –∫–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞")
                    return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å OTP. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."

                except InvalidClientIdError:
                    return False, "–ù–µ–≤–µ—Ä–Ω—ã–π Client ID. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö YubiKey."
                except SignatureVerificationError:
                    return False, "–ù–µ–≤–µ—Ä–Ω—ã–π Secret Key. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö YubiKey."
                except YubicoError as e:
                    msg = str(e) or "YubicoError"
                    lower_msg = msg.lower()
                    if 'timeout' in lower_msg or 'timed out' in lower_msg:
                        return False, "–¢–∞–π–º-–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å YubiCloud. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ."
                    if 'network' in lower_msg or 'connection' in lower_msg:
                        return False, "–ù–µ—Ç —Å–≤—è–∑–∏ —Å YubiCloud. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."
                    return False, f"–û—à–∏–±–∫–∞ Yubico: {msg}"

            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π –æ–Ω–ª–∞–π–Ω OTP"
        else:
            if not self.static_passwords:
                return False, "–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
            print("‚ùå –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω.")
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ñ–ª–∞–π–Ω-–ø–∞—Ä–æ–ª—å"
    

            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ secret_authenticate: {e}")
            return False, f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}"
    
    def require_auth(self, f):
        def decorated(*args, **kwargs):
            if not self.enabled:
                return f(*args, **kwargs)
            if not self.is_authenticated():
                return redirect(url_for('yubikey_login'))
            return f(*args, **kwargs)
        decorated.__name__ = f.__name__
        return decorated

yubikey_auth = None

def init_yubikey_auth(app_data_dir):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç YubiKey –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    global yubikey_auth
    try:
        print(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YubiKey –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {app_data_dir}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–æ–ª–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        import os
        import sys
        from dotenv import load_dotenv
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–µ
        def load_env_file():
            """–ó–∞–≥—Ä—É–∂–∞–µ—Ç .env —Ñ–∞–π–ª –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç."""
            from pathlib import Path
            
            # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –∫ .env —Ñ–∞–π–ª—É
            possible_paths = []
            
            # 1. –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
            possible_paths.append(Path.cwd() / ".env")
            
            # 2. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞)
            if getattr(sys, 'frozen', False):
                # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø–∞–∫–æ–≤–∞–Ω–æ
                if sys.platform == 'darwin':  # macOS
                    # –í .app –±–∞–Ω–¥–ª–µ
                    app_bundle = Path(sys.executable).parent.parent.parent
                    possible_paths.append(app_bundle / "Contents" / "Resources" / ".env")
                    
                    # –í –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    user_env = Path.home() / "Library" / "Application Support" / "AllManagerC" / ".env"
                    possible_paths.append(user_env)
                    
                    # –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    app_dir = Path(sys.executable).parent
                    possible_paths.append(app_dir / ".env")
                elif sys.platform == 'win32':
                    from pathlib import Path as _P
                    possible_paths.append(_P(os.environ.get('APPDATA', str(Path.home()))) / 'AllManagerC' / '.env')
                    possible_paths.append(Path(sys.executable).parent / '.env')
                else:
                    possible_paths.append(Path.home() / '.local' / 'share' / 'AllManagerC' / '.env')
                    possible_paths.append(Path(sys.executable).parent / '.env')
            
            # 3. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–∞
            script_dir = Path(__file__).parent
            possible_paths.append(script_dir / ".env")
            
            # 4. –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            parent_dir = Path(__file__).parent.parent
            possible_paths.append(parent_dir / ".env")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å .env –∏–∑ –∫–∞–∂–¥–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –º–µ—Å—Ç–∞
            for env_path in possible_paths:
                if env_path.exists():
                    print(f"üìÅ [yubikey_auth] –ù–∞–π–¥–µ–Ω .env —Ñ–∞–π–ª: {env_path}")
                    load_dotenv(env_path)
                    return True
            
            print(f"‚ùå [yubikey_auth] .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –º–µ—Å—Ç–∞—Ö:")
            for path in possible_paths:
                print(f"   - {path} {'‚úÖ' if path.exists() else '‚ùå'}")
            return False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
        load_env_file()
        static_passwords_str = os.getenv('YUBIKEY_STATIC_PASSWORDS')
        static_passwords = []
        if static_passwords_str:
            static_passwords = [p.strip() for p in static_passwords_str.split(',')]
            print(f"ü§´ {len(static_passwords)} —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–æ–ª–µ–π YubiKey –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")

        yubikey_auth = YubiKeyAuth(app_data_dir, static_passwords)
        print(f"‚úÖ YubiKey –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: enabled={yubikey_auth.enabled}, keys={len(yubikey_auth.keys)}")
        return yubikey_auth 
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ YubiKey: {e}")
        return None 