#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ AllManagerC
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, Python –≤–µ—Ä—Å–∏—é, –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
"""

import sys
import platform
import os
from pathlib import Path

# –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –∏ —ç–º–æ–¥–∑–∏ –≤ Windows
if platform.system() == 'Windows':
    import io
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

def print_header(text):
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print(f"\n{'='*60}")
    print(f"  {text}")
    print(f"{'='*60}")

def check_platform():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    print_header("üñ•Ô∏è  –ü–õ–ê–¢–§–û–†–ú–ê")
    print(f"  –û–°: {platform.system()} {platform.release()}")
    print(f"  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.machine()}")
    print(f"  –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {platform.processor()}")
    
def check_python():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python"""
    print_header("üêç PYTHON")
    print(f"  –í–µ—Ä—Å–∏—è: {sys.version}")
    print(f"  –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª: {sys.executable}")
    print(f"  –ü—Ä–µ—Ñ–∏–∫—Å: {sys.prefix}")
    print(f"  Base –ø—Ä–µ—Ñ–∏–∫—Å: {sys.base_prefix}")
    
def check_venv():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print_header("üì¶ –í–ò–†–¢–£–ê–õ–¨–ù–û–ï –û–ö–†–£–ñ–ï–ù–ò–ï")
    
    in_venv = sys.prefix != sys.base_prefix
    print(f"  –í –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏: {'‚úÖ –î–ê' if in_venv else '‚ùå –ù–ï–¢'}")
    
    if in_venv:
        print(f"  –ü—É—Ç—å –∫ venv: {sys.prefix}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ .venv –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    venv_dir = Path('.venv')
    if venv_dir.exists():
        print(f"  –ü–∞–ø–∫–∞ .venv: ‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω .venv
        if platform.system() == 'Windows':
            python_exe = venv_dir / 'Scripts' / 'python.exe'
            activate_ps1 = venv_dir / 'Scripts' / 'Activate.ps1'
            if python_exe.exists() and activate_ps1.exists():
                print(f"  –¢–∏–ø .venv: ‚úÖ Windows (Scripts/python.exe)")
            else:
                print(f"  –¢–∏–ø .venv: ‚ö†Ô∏è  –ü–æ—Ö–æ–∂–µ –Ω–∞ Unix, –Ω–æ –≤—ã –Ω–∞ Windows!")
                print(f"  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ .venv –∫–æ–º–∞–Ω–¥–æ–π:")
                print(f"    Remove-Item -Recurse -Force .venv")
                print(f"    python -m venv .venv")
        else:
            python_bin = venv_dir / 'bin' / 'python'
            activate_sh = venv_dir / 'bin' / 'activate'
            if python_bin.exists() and activate_sh.exists():
                print(f"  –¢–∏–ø .venv: ‚úÖ Unix (bin/python)")
            else:
                print(f"  –¢–∏–ø .venv: ‚ö†Ô∏è  –ü–æ—Ö–æ–∂–µ –Ω–∞ Windows, –Ω–æ –≤—ã –Ω–∞ Unix!")
                print(f"  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ .venv –∫–æ–º–∞–Ω–¥–æ–π:")
                print(f"    rm -rf .venv")
                print(f"    python3 -m venv .venv")
    else:
        print(f"  –ü–∞–ø–∫–∞ .venv: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞")
        if platform.system() == 'Windows':
            print(f"  –°–æ–∑–¥–∞–π—Ç–µ: python -m venv .venv")
        else:
            print(f"  –°–æ–∑–¥–∞–π—Ç–µ: python3 -m venv .venv")
    
def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print_header("üìö –ó–ê–í–ò–°–ò–ú–û–°–¢–ò")
    
    packages = {
        'flask': 'Flask',
        'cryptography': 'cryptography',
        'requests': 'requests',
        'webview': 'pywebview',
        'yubico_client': 'yubico-client',
    }
    
    for module_name, package_name in packages.items():
        try:
            module = __import__(module_name)
            version = getattr(module, '__version__', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
            print(f"  ‚úÖ {package_name}: {version}")
        except ImportError:
            print(f"  ‚ùå {package_name}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
    
def check_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print_header("‚öôÔ∏è  –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø")
    
    import json
    config_file = Path('config.json')
    
    if config_file.exists():
        print(f"  ‚úÖ config.json: –°—É—â–µ—Å—Ç–≤—É–µ—Ç")
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
                version = config.get('app_info', {}).get('version', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')
                print(f"  –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {version}")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
    else:
        print(f"  ‚ùå config.json: –ù–µ –Ω–∞–π–¥–µ–Ω")
    
    env_file = Path('.env')
    if env_file.exists():
        print(f"  ‚úÖ .env: –°—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        print(f"  ‚ö†Ô∏è  .env: –ù–µ –Ω–∞–π–¥–µ–Ω (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ %APPDATA%)")
    
def check_git():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ git —Å—Ç–∞—Ç—É—Å–∞"""
    print_header("üîÄ GIT")
    
    git_dir = Path('.git')
    if git_dir.exists():
        print(f"  ‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .venv –≤ gitignore
        gitignore = Path('.gitignore')
        if gitignore.exists():
            try:
                with open(gitignore, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
                    if '.venv' in content or 'venv' in content:
                        print(f"  ‚úÖ .venv –≤ .gitignore: –î–∞")
                    else:
                        print(f"  ‚ö†Ô∏è  .venv –≤ .gitignore: –ù–µ—Ç (–î–û–ë–ê–í–¨–¢–ï!)")
            except Exception as e:
                print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .gitignore: {e}")
        else:
            print(f"  ‚ö†Ô∏è  .gitignore: –ù–µ –Ω–∞–π–¥–µ–Ω")
    else:
        print(f"  ‚ö†Ô∏è  Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

def print_recommendations():
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    print_header("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    
    in_venv = sys.prefix != sys.base_prefix
    
    if not in_venv:
        print("  ‚ö†Ô∏è  –í—ã –ù–ï –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏!")
        print("  –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –µ–≥–æ:")
        if platform.system() == 'Windows':
            print("    .\\venv\\Scripts\\Activate.ps1")
        else:
            print("    source .venv/bin/activate")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("  ‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è Python 3.8+")
        print(f"  –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")
    
    print("\n  üìñ –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
    print("    - README.md - –ì–ª–∞–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    print("    - CROSS_PLATFORM_GUIDE.md - –†–∞–±–æ—Ç–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –û–°")
    print("    - QUICK_RELEASE_GUIDE.md - –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "üîç –ü–†–û–í–ï–†–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø AllManagerC".center(60))
    
    check_platform()
    check_python()
    check_venv()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ venv –∏–ª–∏ –µ—Å—Ç—å .venv
    if sys.prefix != sys.base_prefix or Path('.venv').exists():
        check_dependencies()
    
    check_config()
    check_git()
    print_recommendations()
    
    print("\n" + "="*60)
    print("  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("="*60 + "\n")

if __name__ == '__main__':
    main()

